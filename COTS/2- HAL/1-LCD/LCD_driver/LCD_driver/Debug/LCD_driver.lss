
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f37  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1a  00000000  00000000  00001bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  000025d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b7f  00000000  00000000  00002b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000036fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  64:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_set_PORT_DIR>:

		 }
		 else
		  Local_u8ErrorState = STD_TYPES_NOK;
		 return Local_u8ErrorState;
	 }
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	b0 f4       	brcc	.+44     	; 0x9c <DIO_set_PORT_DIR+0x30>
  70:	62 30       	cpi	r22, 0x02	; 2
  72:	b0 f4       	brcc	.+44     	; 0xa0 <DIO_set_PORT_DIR+0x34>
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	49 f0       	breq	.+18     	; 0x8a <DIO_set_PORT_DIR+0x1e>
  78:	28 f0       	brcs	.+10     	; 0x84 <DIO_set_PORT_DIR+0x18>
  7a:	82 30       	cpi	r24, 0x02	; 2
  7c:	49 f0       	breq	.+18     	; 0x90 <DIO_set_PORT_DIR+0x24>
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	51 f0       	breq	.+20     	; 0x96 <DIO_set_PORT_DIR+0x2a>
  82:	10 c0       	rjmp	.+32     	; 0xa4 <DIO_set_PORT_DIR+0x38>
  84:	6a bb       	out	0x1a, r22	; 26
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	08 95       	ret
  8a:	67 bb       	out	0x17, r22	; 23
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	08 95       	ret
  90:	64 bb       	out	0x14, r22	; 20
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	08 95       	ret
  96:	61 bb       	out	0x11, r22	; 17
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	08 95       	ret
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	08 95       	ret
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	08 95       	ret
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	08 95       	ret

000000a8 <DIO_write_PORT>:
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	b0 f4       	brcc	.+44     	; 0xd8 <DIO_write_PORT+0x30>
  ac:	62 30       	cpi	r22, 0x02	; 2
  ae:	b0 f4       	brcc	.+44     	; 0xdc <DIO_write_PORT+0x34>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	49 f0       	breq	.+18     	; 0xc6 <DIO_write_PORT+0x1e>
  b4:	28 f0       	brcs	.+10     	; 0xc0 <DIO_write_PORT+0x18>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	49 f0       	breq	.+18     	; 0xcc <DIO_write_PORT+0x24>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	51 f0       	breq	.+20     	; 0xd2 <DIO_write_PORT+0x2a>
  be:	10 c0       	rjmp	.+32     	; 0xe0 <DIO_write_PORT+0x38>
  c0:	6b bb       	out	0x1b, r22	; 27
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	68 bb       	out	0x18, r22	; 24
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
  cc:	65 bb       	out	0x15, r22	; 21
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
  d2:	62 bb       	out	0x12, r22	; 18
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret

000000e4 <DIO_setPIN_DIR>:
	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;

		if (((portnum==PORTA)||(portnum==PORTB)||(portnum==PORTC)||(portnum==PORTD))&& (pinnum<=PIN7)&&((dir==INPUT)||(dir==OUTPUT)))
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	08 f0       	brcs	.+2      	; 0xea <DIO_setPIN_DIR+0x6>
  e8:	7b c0       	rjmp	.+246    	; 0x1e0 <DIO_setPIN_DIR+0xfc>
  ea:	68 30       	cpi	r22, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <DIO_setPIN_DIR+0xc>
  ee:	7a c0       	rjmp	.+244    	; 0x1e4 <DIO_setPIN_DIR+0x100>
  f0:	42 30       	cpi	r20, 0x02	; 2
  f2:	08 f0       	brcs	.+2      	; 0xf6 <DIO_setPIN_DIR+0x12>
  f4:	79 c0       	rjmp	.+242    	; 0x1e8 <DIO_setPIN_DIR+0x104>
		{
			switch(portnum)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	11 f1       	breq	.+68     	; 0x13e <DIO_setPIN_DIR+0x5a>
  fa:	30 f0       	brcs	.+12     	; 0x108 <DIO_setPIN_DIR+0x24>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	d1 f1       	breq	.+116    	; 0x174 <DIO_setPIN_DIR+0x90>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	09 f4       	brne	.+2      	; 0x106 <DIO_setPIN_DIR+0x22>
 104:	52 c0       	rjmp	.+164    	; 0x1aa <DIO_setPIN_DIR+0xc6>
 106:	72 c0       	rjmp	.+228    	; 0x1ec <DIO_setPIN_DIR+0x108>
			{
			case PORTA:
			if (dir==OUTPUT){ SET_BIT(DDRA_REG,pinnum);}
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	61 f4       	brne	.+24     	; 0x124 <DIO_setPIN_DIR+0x40>
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_setPIN_DIR+0x34>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_setPIN_DIR+0x30>
 11c:	82 2b       	or	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	08 95       	ret
		{
			switch(portnum)
			{
			case PORTA:
			if (dir==OUTPUT){ SET_BIT(DDRA_REG,pinnum);}
			else {CLR_BIT(DDRA_REG,pinnum);}
 124:	2a b3       	in	r18, 0x1a	; 26
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPIN_DIR+0x4c>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPIN_DIR+0x48>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	8a bb       	out	0x1a, r24	; 26


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
			if (dir==OUTPUT){ SET_BIT(DDRA_REG,pinnum);}
			else {CLR_BIT(DDRA_REG,pinnum);}
			break;

			case PORTB:
			if (dir==OUTPUT){ SET_BIT(DDRB_REG,pinnum);}
 13e:	41 30       	cpi	r20, 0x01	; 1
 140:	61 f4       	brne	.+24     	; 0x15a <DIO_setPIN_DIR+0x76>
 142:	27 b3       	in	r18, 0x17	; 23
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_setPIN_DIR+0x6a>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_setPIN_DIR+0x66>
 152:	82 2b       	or	r24, r18
 154:	87 bb       	out	0x17, r24	; 23


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
			else {CLR_BIT(DDRA_REG,pinnum);}
			break;

			case PORTB:
			if (dir==OUTPUT){ SET_BIT(DDRB_REG,pinnum);}
			else {CLR_BIT(DDRB_REG,pinnum);}
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_setPIN_DIR+0x82>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_setPIN_DIR+0x7e>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	87 bb       	out	0x17, r24	; 23


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
			if (dir==OUTPUT){ SET_BIT(DDRB_REG,pinnum);}
			else {CLR_BIT(DDRB_REG,pinnum);}
			break;

			case PORTC:
			if (dir==OUTPUT){ SET_BIT(DDRC_REG,pinnum);}
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	61 f4       	brne	.+24     	; 0x190 <DIO_setPIN_DIR+0xac>
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setPIN_DIR+0xa0>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setPIN_DIR+0x9c>
 188:	82 2b       	or	r24, r18
 18a:	84 bb       	out	0x14, r24	; 20


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	08 95       	ret
			else {CLR_BIT(DDRB_REG,pinnum);}
			break;

			case PORTC:
			if (dir==OUTPUT){ SET_BIT(DDRC_REG,pinnum);}
			else {CLR_BIT(DDRC_REG,pinnum);}
 190:	24 b3       	in	r18, 0x14	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_setPIN_DIR+0xb8>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_setPIN_DIR+0xb4>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
			if (dir==OUTPUT){ SET_BIT(DDRC_REG,pinnum);}
			else {CLR_BIT(DDRC_REG,pinnum);}
			break;

			case PORTD:
			if (dir==OUTPUT){ SET_BIT(DDRD_REG,pinnum);}
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	61 f4       	brne	.+24     	; 0x1c6 <DIO_setPIN_DIR+0xe2>
 1ae:	21 b3       	in	r18, 0x11	; 17
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_setPIN_DIR+0xd6>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_setPIN_DIR+0xd2>
 1be:	82 2b       	or	r24, r18
 1c0:	81 bb       	out	0x11, r24	; 17


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
			else {CLR_BIT(DDRC_REG,pinnum);}
			break;

			case PORTD:
			if (dir==OUTPUT){ SET_BIT(DDRD_REG,pinnum);}
			else {CLR_BIT(DDRD_REG,pinnum);}
 1c6:	21 b3       	in	r18, 0x11	; 17
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_setPIN_DIR+0xee>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_setPIN_DIR+0xea>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	81 bb       	out	0x11, r24	; 17


	 /************ PIN FUNCTIONS ************/
	u8 DIO_setPIN_DIR(u8 portnum, u8 pinnum, u8 dir)
	{
		u8 Local_u8ErrorState = STD_TYPES_OK;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret
			default: Local_u8ErrorState = STD_TYPES_NOK;break;
			}

		}
		else
		 Local_u8ErrorState = STD_TYPES_NOK;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
			case PORTD:
			if (dir==OUTPUT){ SET_BIT(DDRD_REG,pinnum);}
			else {CLR_BIT(DDRD_REG,pinnum);}
			break;

			default: Local_u8ErrorState = STD_TYPES_NOK;break;
 1ec:	80 e0       	ldi	r24, 0x00	; 0

		}
		else
		 Local_u8ErrorState = STD_TYPES_NOK;
		return Local_u8ErrorState;
			}
 1ee:	08 95       	ret

000001f0 <LCD_send_cmd>:
	LCD_send_cmd(lcd_EntryMode);
	_delay_ms(2);

}

void LCD_send_cmd(u8 copy_cmd){
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
	
/*SET RS to 0*/
 DIO_setPIN_DIR(PORTA,PIN0,LOW);
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
/*SET RW to 0*/	
 DIO_setPIN_DIR(PORTA,PIN1,LOW);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
/*Write command*/
 DIO_write_PORT(PORTC, copy_cmd);
 208:	6c 2f       	mov	r22, r28
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_write_PORT>
/*SET E to 1*/
 DIO_setPIN_DIR(PORTA,PIN2,HIGH);
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_send_cmd+0x2c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_send_cmd+0x32>
_delay_us(1);
/*SET E to 0*/	
 DIO_setPIN_DIR(PORTA,PIN2,LOW);		
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
}
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	8f e5       	ldi	r24, 0x5F	; 95
 232:	9a ee       	ldi	r25, 0xEA	; 234
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_init+0x4>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_init+0xa>
 23a:	00 00       	nop
{
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_send_cmd(lcd_Home);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_send_cmd>
 242:	8f e2       	ldi	r24, 0x2F	; 47
 244:	95 e7       	ldi	r25, 0x75	; 117
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_init+0x16>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_init+0x1c>
 24c:	00 00       	nop
	_delay_ms(15);

	/* Function Set  */
	LCD_send_cmd(lcd_FunctionSet8bit);
 24e:	88 e3       	ldi	r24, 0x38	; 56
 250:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_send_cmd>
 254:	8f ec       	ldi	r24, 0xCF	; 207
 256:	97 e0       	ldi	r25, 0x07	; 7
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_init+0x28>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_init+0x2e>
 25e:	00 00       	nop
	_delay_ms(1);

	/* Display ON OFF Control */
	LCD_send_cmd(lcd_DisplayOn);
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_send_cmd>
 266:	8f ec       	ldi	r24, 0xCF	; 207
 268:	97 e0       	ldi	r25, 0x07	; 7
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_init+0x3a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_init+0x40>
 270:	00 00       	nop
	_delay_ms(1);

	/* Clear Display */
	LCD_send_cmd(lcd_Clear);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_send_cmd>
 278:	8f e2       	ldi	r24, 0x2F	; 47
 27a:	95 e7       	ldi	r25, 0x75	; 117
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_init+0x4c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_init+0x52>
 282:	00 00       	nop
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_send_cmd(lcd_EntryMode);
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_send_cmd>
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_init+0x5e>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_init+0x64>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <LCD_send_char>:
_delay_us(1);
/*SET E to 0*/	
 DIO_setPIN_DIR(PORTA,PIN2,LOW);		
}

void LCD_send_char(u8 copy_char){
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
	
	/*SET RS to 1*/
	 DIO_setPIN_DIR(PORTA,PIN0,HIGH);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
	/*SET RW to 0*/
	 DIO_setPIN_DIR(PORTA,PIN1,LOW);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
	/*Write data*/
	 DIO_write_PORT(PORTC, copy_char);
 2b0:	6c 2f       	mov	r22, r28
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_write_PORT>
	/*SET E to 1*/
	 DIO_setPIN_DIR(PORTA,PIN2,HIGH);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_send_char+0x2c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_send_char+0x32>
	_delay_us(1);
	/*SET E to 0*/
	 DIO_setPIN_DIR(PORTA,PIN2,LOW);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_setPIN_DIR>
		
}
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <main>:
#include "STD_TYPES.h"


int main(void){
	 
	 LCD_init();
 2d8:	0e 94 18 01 	call	0x230	; 0x230 <LCD_init>
	DIO_set_PORT_DIR(A,OUTPUT);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_set_PORT_DIR>
	DIO_set_PORT_DIR(D,OUTPUT);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_set_PORT_DIR>
	while(1){
			
	 LCD_send_char('H');
 2ec:	88 e4       	ldi	r24, 0x48	; 72
 2ee:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_send_char>
	 LCD_send_char('A');
 2f2:	81 e4       	ldi	r24, 0x41	; 65
 2f4:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	80 e7       	ldi	r24, 0x70	; 112
 2fc:	92 e0       	ldi	r25, 0x02	; 2
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x26>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x30>
 308:	00 00       	nop
 30a:	f0 cf       	rjmp	.-32     	; 0x2ec <main+0x14>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
