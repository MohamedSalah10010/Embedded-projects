
EMBEDDED_TASK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f8  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b4  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e4  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
    DIO_init(PORT_A,0,OUT); // LED RED
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	81 e4       	ldi	r24, 0x41	; 65
  72:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
    DIO_init(PORT_A,1,OUT); // YELLOW LED
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	81 e4       	ldi	r24, 0x41	; 65
  7c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
    DIO_init(PORT_A,2,OUT); // GREEN LED
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	81 e4       	ldi	r24, 0x41	; 65
  86:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
    DIO_init(PORT_C,0,OUT);// MOTOR IN1
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	83 e4       	ldi	r24, 0x43	; 67
  90:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
    DIO_init(PORT_C,1,OUT);// MOTOR IN2
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	83 e4       	ldi	r24, 0x43	; 67
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_init>
    
	while (1) 
    {
		DIO_write(PORT_A,0,HIGH);//RED STATE
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_C,0,HIGH);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	83 e4       	ldi	r24, 0x43	; 67
  ae:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_C,1,LOW);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	83 e4       	ldi	r24, 0x43	; 67
  b8:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
		_delay_ms(5000);
		DIO_write(PORT_A,0,LOW);//RED OFF
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_A,1,HIGH); // YELLOW STATE
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_C,0,LOW);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e4       	ldi	r24, 0x43	; 67
  e8:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_C,1,LOW);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	83 e4       	ldi	r24, 0x43	; 67
  f2:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
  f6:	2f e3       	ldi	r18, 0x3F	; 63
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	9f e0       	ldi	r25, 0x0F	; 15
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x90>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x9a>
 106:	00 00       	nop
		_delay_ms(5000);
		DIO_write(PORT_A,1,LOW); // YELLOW STATE
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e4       	ldi	r24, 0x41	; 65
 10e:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_A,2,HIGH);//GREEN STATE
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_C,1,HIGH);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	83 e4       	ldi	r24, 0x43	; 67
 122:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
		DIO_write(PORT_C,0,LOW);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	83 e4       	ldi	r24, 0x43	; 67
 12c:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
 130:	2f e3       	ldi	r18, 0x3F	; 63
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0xca>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xd4>
 140:	00 00       	nop
		_delay_ms(5000);
		DIO_write(PORT_A,2,LOW);//GREEN STATE
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_write>
 14c:	a8 cf       	rjmp	.-176    	; 0x9e <main+0x32>

0000014e <DIO_init>:
#include "DIO.h"


void DIO_init (u8 portNumber, u8 pinNumber, u8 pinDirection)
{
	switch (portNumber)
 14e:	82 34       	cpi	r24, 0x42	; 66
 150:	29 f1       	breq	.+74     	; 0x19c <DIO_init+0x4e>
 152:	18 f4       	brcc	.+6      	; 0x15a <DIO_init+0xc>
 154:	81 34       	cpi	r24, 0x41	; 65
 156:	39 f0       	breq	.+14     	; 0x166 <DIO_init+0x18>
 158:	08 95       	ret
 15a:	83 34       	cpi	r24, 0x43	; 67
 15c:	d1 f1       	breq	.+116    	; 0x1d2 <DIO_init+0x84>
 15e:	84 34       	cpi	r24, 0x44	; 68
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_init+0x16>
 162:	52 c0       	rjmp	.+164    	; 0x208 <DIO_init+0xba>
 164:	08 95       	ret
	{
		case PORT_A:
			if (pinDirection == OUT)
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	59 f4       	brne	.+22     	; 0x180 <DIO_init+0x32>
			{
				SET_BIT(DDRA, pinNumber);// SET_BIT (DDRA,2) --> A (0000 0100)
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_init+0x28>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_init+0x24>
 17a:	82 2b       	or	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	08 95       	ret
			}
			else if (pinDirection == IN)
 180:	41 11       	cpse	r20, r1
 182:	5c c0       	rjmp	.+184    	; 0x23c <DIO_init+0xee>
			{
				CLR_BIT(DDRA, pinNumber);// CLR_BIT (DDRA,2) --> A (0000 0000)
 184:	2a b3       	in	r18, 0x1a	; 26
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_init+0x42>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_init+0x3e>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	8a bb       	out	0x1a, r24	; 26
 19a:	08 95       	ret
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinDirection == OUT)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <DIO_init+0x68>
			{
				SET_BIT(DDRB, pinNumber);
 1a0:	27 b3       	in	r18, 0x17	; 23
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_init+0x5e>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_init+0x5a>
 1b0:	82 2b       	or	r24, r18
 1b2:	87 bb       	out	0x17, r24	; 23
 1b4:	08 95       	ret
			}
			else if (pinDirection == IN)
 1b6:	41 11       	cpse	r20, r1
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <DIO_init+0xee>
			{
				CLR_BIT(DDRB, pinNumber);
 1ba:	27 b3       	in	r18, 0x17	; 23
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_init+0x78>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_init+0x74>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	87 bb       	out	0x17, r24	; 23
 1d0:	08 95       	ret
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinDirection == OUT)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	59 f4       	brne	.+22     	; 0x1ec <DIO_init+0x9e>
			{
				SET_BIT(DDRC, pinNumber);
 1d6:	24 b3       	in	r18, 0x14	; 20
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_init+0x94>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_init+0x90>
 1e6:	82 2b       	or	r24, r18
 1e8:	84 bb       	out	0x14, r24	; 20
 1ea:	08 95       	ret
			}
			else if (pinDirection == IN)
 1ec:	41 11       	cpse	r20, r1
 1ee:	26 c0       	rjmp	.+76     	; 0x23c <DIO_init+0xee>
			{
				CLR_BIT(DDRC, pinNumber);
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_init+0xae>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_init+0xaa>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	84 bb       	out	0x14, r24	; 20
 206:	08 95       	ret
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinDirection == OUT)
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	59 f4       	brne	.+22     	; 0x222 <DIO_init+0xd4>
			{
				SET_BIT(DDRD, pinNumber);
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_init+0xca>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_init+0xc6>
 21c:	82 2b       	or	r24, r18
 21e:	81 bb       	out	0x11, r24	; 17
 220:	08 95       	ret
			}
			else if (pinDirection == IN)
 222:	41 11       	cpse	r20, r1
 224:	0b c0       	rjmp	.+22     	; 0x23c <DIO_init+0xee>
			{
				CLR_BIT(DDRD, pinNumber);
 226:	21 b3       	in	r18, 0x11	; 17
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_init+0xe4>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_init+0xe0>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	81 bb       	out	0x11, r24	; 17
 23c:	08 95       	ret

0000023e <DIO_write>:
	}
}

void DIO_write (u8 portNumber, u8 pinNumber, u8 pinValue)
{
	switch (portNumber)
 23e:	82 34       	cpi	r24, 0x42	; 66
 240:	29 f1       	breq	.+74     	; 0x28c <DIO_write+0x4e>
 242:	18 f4       	brcc	.+6      	; 0x24a <DIO_write+0xc>
 244:	81 34       	cpi	r24, 0x41	; 65
 246:	39 f0       	breq	.+14     	; 0x256 <DIO_write+0x18>
 248:	08 95       	ret
 24a:	83 34       	cpi	r24, 0x43	; 67
 24c:	d1 f1       	breq	.+116    	; 0x2c2 <DIO_write+0x84>
 24e:	84 34       	cpi	r24, 0x44	; 68
 250:	09 f4       	brne	.+2      	; 0x254 <DIO_write+0x16>
 252:	52 c0       	rjmp	.+164    	; 0x2f8 <DIO_write+0xba>
 254:	08 95       	ret
	{
		case PORT_A:
			if (pinValue == HIGH)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	59 f4       	brne	.+22     	; 0x270 <DIO_write+0x32>
			{
				SET_BIT(PORTA, pinNumber);
 25a:	2b b3       	in	r18, 0x1b	; 27
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_write+0x28>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_write+0x24>
 26a:	82 2b       	or	r24, r18
 26c:	8b bb       	out	0x1b, r24	; 27
 26e:	08 95       	ret
			}
			else if (pinValue == LOW)
 270:	41 11       	cpse	r20, r1
 272:	5c c0       	rjmp	.+184    	; 0x32c <DIO_write+0xee>
			{
				CLR_BIT(PORTA, pinNumber);
 274:	2b b3       	in	r18, 0x1b	; 27
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_write+0x42>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_write+0x3e>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	08 95       	ret
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinValue == HIGH)
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	59 f4       	brne	.+22     	; 0x2a6 <DIO_write+0x68>
			{
				SET_BIT(PORTB, pinNumber);
 290:	28 b3       	in	r18, 0x18	; 24
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_write+0x5e>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_write+0x5a>
 2a0:	82 2b       	or	r24, r18
 2a2:	88 bb       	out	0x18, r24	; 24
 2a4:	08 95       	ret
			}
			else if (pinValue == LOW)
 2a6:	41 11       	cpse	r20, r1
 2a8:	41 c0       	rjmp	.+130    	; 0x32c <DIO_write+0xee>
			{
				CLR_BIT(PORTB, pinNumber);
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_write+0x78>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_write+0x74>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	08 95       	ret
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinValue == HIGH)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <DIO_write+0x9e>
			{
				SET_BIT(PORTC, pinNumber);
 2c6:	25 b3       	in	r18, 0x15	; 21
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write+0x94>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write+0x90>
 2d6:	82 2b       	or	r24, r18
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	08 95       	ret
			}
			else if (pinValue == LOW)
 2dc:	41 11       	cpse	r20, r1
 2de:	26 c0       	rjmp	.+76     	; 0x32c <DIO_write+0xee>
			{
				CLR_BIT(PORTC, pinNumber);
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_write+0xae>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_write+0xaa>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	08 95       	ret
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinValue == HIGH)
 2f8:	41 30       	cpi	r20, 0x01	; 1
 2fa:	59 f4       	brne	.+22     	; 0x312 <DIO_write+0xd4>
			{
				SET_BIT(PORTD, pinNumber);
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_write+0xca>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_write+0xc6>
 30c:	82 2b       	or	r24, r18
 30e:	82 bb       	out	0x12, r24	; 18
 310:	08 95       	ret
			}
			else if (pinValue == LOW)
 312:	41 11       	cpse	r20, r1
 314:	0b c0       	rjmp	.+22     	; 0x32c <DIO_write+0xee>
			{
				CLR_BIT(PORTD, pinNumber);
 316:	22 b3       	in	r18, 0x12	; 18
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_write+0xe4>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_write+0xe0>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
