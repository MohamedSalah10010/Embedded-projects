
embedded_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000775  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000480  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000430  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "MCAL/DIO_INTERFACE.h"

int main(void)
{
	DIO_setPIN_DIR(PORTA,5,OUTPUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	65 e0       	ldi	r22, 0x05	; 5
  70:	81 e4       	ldi	r24, 0x41	; 65
  72:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPIN_DIR>
	
    /* Replace with your application code */
    while (1) 
    {
		DIO_write_PIN(PORTA,5,HIGH);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	65 e0       	ldi	r22, 0x05	; 5
  7a:	81 e4       	ldi	r24, 0x41	; 65
  7c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write_PIN>
  80:	fa cf       	rjmp	.-12     	; 0x76 <main+0xa>

00000082 <DIO_setPIN_DIR>:

		}
		else
		 Local_uint8_tErrorState = STD_TYPES_NOK;
		return value;
	}
  82:	9f eb       	ldi	r25, 0xBF	; 191
  84:	98 0f       	add	r25, r24
  86:	94 30       	cpi	r25, 0x04	; 4
  88:	08 f0       	brcs	.+2      	; 0x8c <DIO_setPIN_DIR+0xa>
  8a:	7e c0       	rjmp	.+252    	; 0x188 <DIO_setPIN_DIR+0x106>
  8c:	68 30       	cpi	r22, 0x08	; 8
  8e:	08 f0       	brcs	.+2      	; 0x92 <DIO_setPIN_DIR+0x10>
  90:	7d c0       	rjmp	.+250    	; 0x18c <DIO_setPIN_DIR+0x10a>
  92:	42 30       	cpi	r20, 0x02	; 2
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_setPIN_DIR+0x16>
  96:	7c c0       	rjmp	.+248    	; 0x190 <DIO_setPIN_DIR+0x10e>
  98:	82 34       	cpi	r24, 0x42	; 66
  9a:	29 f1       	breq	.+74     	; 0xe6 <DIO_setPIN_DIR+0x64>
  9c:	18 f4       	brcc	.+6      	; 0xa4 <DIO_setPIN_DIR+0x22>
  9e:	81 34       	cpi	r24, 0x41	; 65
  a0:	39 f0       	breq	.+14     	; 0xb0 <DIO_setPIN_DIR+0x2e>
  a2:	78 c0       	rjmp	.+240    	; 0x194 <DIO_setPIN_DIR+0x112>
  a4:	83 34       	cpi	r24, 0x43	; 67
  a6:	d1 f1       	breq	.+116    	; 0x11c <DIO_setPIN_DIR+0x9a>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_setPIN_DIR+0x2c>
  ac:	52 c0       	rjmp	.+164    	; 0x152 <DIO_setPIN_DIR+0xd0>
  ae:	72 c0       	rjmp	.+228    	; 0x194 <DIO_setPIN_DIR+0x112>
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	61 f4       	brne	.+24     	; 0xcc <DIO_setPIN_DIR+0x4a>
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_setPIN_DIR+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_setPIN_DIR+0x3a>
  c4:	82 2b       	or	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
  cc:	2a b3       	in	r18, 0x1a	; 26
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_setPIN_DIR+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_setPIN_DIR+0x52>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	8a bb       	out	0x1a, r24	; 26
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	61 f4       	brne	.+24     	; 0x102 <DIO_setPIN_DIR+0x80>
  ea:	27 b3       	in	r18, 0x17	; 23
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_setPIN_DIR+0x74>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_setPIN_DIR+0x70>
  fa:	82 2b       	or	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPIN_DIR+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPIN_DIR+0x88>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	61 f4       	brne	.+24     	; 0x138 <DIO_setPIN_DIR+0xb6>
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_setPIN_DIR+0xaa>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_setPIN_DIR+0xa6>
 130:	82 2b       	or	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_setPIN_DIR+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_setPIN_DIR+0xbe>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	61 f4       	brne	.+24     	; 0x16e <DIO_setPIN_DIR+0xec>
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPIN_DIR+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPIN_DIR+0xdc>
 166:	82 2b       	or	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
 16e:	21 b3       	in	r18, 0x11	; 17
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_setPIN_DIR+0xf8>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_setPIN_DIR+0xf4>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret

00000198 <DIO_write_PIN>:

	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;

		if (((portnum==PORTA)||(portnum==PORTB)||(portnum==PORTC)||(portnum==PORTD))&& (pinnum<=PIN7)&&((value==HIGH)||(value==LOW)))
 198:	9f eb       	ldi	r25, 0xBF	; 191
 19a:	98 0f       	add	r25, r24
 19c:	94 30       	cpi	r25, 0x04	; 4
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <DIO_write_PIN+0xa>
 1a0:	7e c0       	rjmp	.+252    	; 0x29e <DIO_write_PIN+0x106>
 1a2:	68 30       	cpi	r22, 0x08	; 8
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <DIO_write_PIN+0x10>
 1a6:	7d c0       	rjmp	.+250    	; 0x2a2 <DIO_write_PIN+0x10a>
 1a8:	42 30       	cpi	r20, 0x02	; 2
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <DIO_write_PIN+0x16>
 1ac:	7c c0       	rjmp	.+248    	; 0x2a6 <DIO_write_PIN+0x10e>
		{
			switch(portnum)
 1ae:	82 34       	cpi	r24, 0x42	; 66
 1b0:	29 f1       	breq	.+74     	; 0x1fc <DIO_write_PIN+0x64>
 1b2:	18 f4       	brcc	.+6      	; 0x1ba <DIO_write_PIN+0x22>
 1b4:	81 34       	cpi	r24, 0x41	; 65
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <DIO_write_PIN+0x2e>
 1b8:	78 c0       	rjmp	.+240    	; 0x2aa <DIO_write_PIN+0x112>
 1ba:	83 34       	cpi	r24, 0x43	; 67
 1bc:	d1 f1       	breq	.+116    	; 0x232 <DIO_write_PIN+0x9a>
 1be:	84 34       	cpi	r24, 0x44	; 68
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_write_PIN+0x2c>
 1c2:	52 c0       	rjmp	.+164    	; 0x268 <DIO_write_PIN+0xd0>
 1c4:	72 c0       	rjmp	.+228    	; 0x2aa <DIO_write_PIN+0x112>
			{
				case PORTA:
				if (value==HIGH){ SET_BIT(PORTA_REG,pinnum);}
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	61 f4       	brne	.+24     	; 0x1e2 <DIO_write_PIN+0x4a>
 1ca:	2b b3       	in	r18, 0x1b	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_write_PIN+0x3e>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_write_PIN+0x3a>
 1da:	82 2b       	or	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	08 95       	ret
		{
			switch(portnum)
			{
				case PORTA:
				if (value==HIGH){ SET_BIT(PORTA_REG,pinnum);}
				else {CLR_BIT(PORTA_REG,pinnum);}
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write_PIN+0x56>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write_PIN+0x52>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
				if (value==HIGH){ SET_BIT(PORTA_REG,pinnum);}
				else {CLR_BIT(PORTA_REG,pinnum);}
				break;

				case PORTB:
				if (value==HIGH){ SET_BIT(PORTB_REG,pinnum);}
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	61 f4       	brne	.+24     	; 0x218 <DIO_write_PIN+0x80>
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_write_PIN+0x74>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_write_PIN+0x70>
 210:	82 2b       	or	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	08 95       	ret
				else {CLR_BIT(PORTA_REG,pinnum);}
				break;

				case PORTB:
				if (value==HIGH){ SET_BIT(PORTB_REG,pinnum);}
				else {CLR_BIT(PORTB_REG,pinnum);}
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_write_PIN+0x8c>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_write_PIN+0x88>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	88 bb       	out	0x18, r24	; 24
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
				if (value==HIGH){ SET_BIT(PORTB_REG,pinnum);}
				else {CLR_BIT(PORTB_REG,pinnum);}
				break;

				case PORTC:
				if (value==HIGH){ SET_BIT(PORTC_REG,pinnum);}
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	61 f4       	brne	.+24     	; 0x24e <DIO_write_PIN+0xb6>
 236:	25 b3       	in	r18, 0x15	; 21
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_write_PIN+0xaa>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_write_PIN+0xa6>
 246:	82 2b       	or	r24, r18
 248:	85 bb       	out	0x15, r24	; 21
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
				else {CLR_BIT(PORTB_REG,pinnum);}
				break;

				case PORTC:
				if (value==HIGH){ SET_BIT(PORTC_REG,pinnum);}
				else {CLR_BIT(PORTC_REG,pinnum);}
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write_PIN+0xc2>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write_PIN+0xbe>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	85 bb       	out	0x15, r24	; 21
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
				if (value==HIGH){ SET_BIT(PORTC_REG,pinnum);}
				else {CLR_BIT(PORTC_REG,pinnum);}
				break;

				case PORTD:
				if (value==HIGH){ SET_BIT(PORTD_REG,pinnum);}
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	61 f4       	brne	.+24     	; 0x284 <DIO_write_PIN+0xec>
 26c:	22 b3       	in	r18, 0x12	; 18
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_write_PIN+0xe0>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_write_PIN+0xdc>
 27c:	82 2b       	or	r24, r18
 27e:	82 bb       	out	0x12, r24	; 18
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret
				else {CLR_BIT(PORTC_REG,pinnum);}
				break;

				case PORTD:
				if (value==HIGH){ SET_BIT(PORTD_REG,pinnum);}
				else {CLR_BIT(PORTD_REG,pinnum);}
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write_PIN+0xf8>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write_PIN+0xf4>
 294:	80 95       	com	r24
 296:	82 23       	and	r24, r18
 298:	82 bb       	out	0x12, r24	; 18
	}


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	08 95       	ret
				default: Local_uint8_tErrorState = STD_TYPES_NOK;break;
			}

		}
		else
		 Local_uint8_tErrorState = STD_TYPES_NOK;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
				case PORTD:
				if (value==HIGH){ SET_BIT(PORTD_REG,pinnum);}
				else {CLR_BIT(PORTD_REG,pinnum);}
				break;

				default: Local_uint8_tErrorState = STD_TYPES_NOK;break;
 2aa:	80 e0       	ldi	r24, 0x00	; 0

		}
		else
		 Local_uint8_tErrorState = STD_TYPES_NOK;
		return Local_uint8_tErrorState;
	}
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
