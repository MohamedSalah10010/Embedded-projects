
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000011ac  00001240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00001242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d71  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  00002171  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb0  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00003570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  000038d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000626  00000000  00000000  00003e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
      8a:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Normal>:
	LED_off(LED_CAR_PORT,LED_CAR_RED);
	LED_off(LED_walking_PORT,LED_walking_GREEN);

}*/

void Normal(void){
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	interrupt=OFF;
      9e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <interrupt>
	2. then yellow blinks for 5 sec 
	3. then red for 5 sec 
	4. the yellow blinks for 5 sec      */
	
	/****car signal is green****/
	CAR_SIGNAL_STATE=GREEN;
      a2:	82 e0       	ldi	r24, 0x02	; 2
      a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	LED_on(LED_CAR_PORT,LED_CAR_GREEN);          
      a8:	60 e0       	ldi	r22, 0x00	; 0
      aa:	81 e4       	ldi	r24, 0x41	; 65
      ac:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
    LED_on(LED_walking_PORT,LED_walking_RED); 
      b0:	62 e0       	ldi	r22, 0x02	; 2
      b2:	82 e4       	ldi	r24, 0x42	; 66
      b4:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
	delay(time_millis);
      b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      c0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
	LED_off(LED_CAR_PORT,LED_CAR_GREEN);   
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	81 e4       	ldi	r24, 0x41	; 65
      c8:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	LED_off(LED_walking_PORT,LED_walking_RED);
      cc:	62 e0       	ldi	r22, 0x02	; 2
      ce:	82 e4       	ldi	r24, 0x42	; 66
      d0:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	if (interrupt==ON)pedestrian();
      d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <interrupt>
      d8:	81 30       	cpi	r24, 0x01	; 1
      da:	11 f4       	brne	.+4      	; 0xe0 <Normal+0x4e>
      dc:	0e 94 c8 00 	call	0x190	; 0x190 <pedestrian>
	
	/****car signal is yellow****/
	CAR_SIGNAL_STATE=YELLOW;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
      e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      ea:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      ee:	8c 01       	movw	r16, r24
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	42 e4       	ldi	r20, 0x42	; 66
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	81 e4       	ldi	r24, 0x41	; 65
      f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
	LED_off(LED_CAR_PORT,LED_CAR_YELLOW);      
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	81 e4       	ldi	r24, 0x41	; 65
     100:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
    LED_off(LED_walking_PORT,LED_walking_YELLOW);
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	82 e4       	ldi	r24, 0x42	; 66
     108:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	if (interrupt==ON)pedestrian();
     10c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <interrupt>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	11 f4       	brne	.+4      	; 0x118 <Normal+0x86>
     114:	0e 94 c8 00 	call	0x190	; 0x190 <pedestrian>
	
	/****car signal is red****/
	CAR_SIGNAL_STATE=RED;
     118:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	LED_on(LED_CAR_PORT,LED_CAR_RED);
     11c:	62 e0       	ldi	r22, 0x02	; 2
     11e:	81 e4       	ldi	r24, 0x41	; 65
     120:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
	LED_on(LED_walking_PORT,LED_walking_GREEN);
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	82 e4       	ldi	r24, 0x42	; 66
     128:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
	delay(time_millis);
     12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     130:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     134:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
	LED_off(LED_CAR_PORT,LED_CAR_RED);	
     138:	62 e0       	ldi	r22, 0x02	; 2
     13a:	81 e4       	ldi	r24, 0x41	; 65
     13c:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	LED_off(LED_walking_PORT,LED_walking_GREEN);
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	82 e4       	ldi	r24, 0x42	; 66
     144:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	if (interrupt==ON)pedestrian();
     148:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <interrupt>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	11 f4       	brne	.+4      	; 0x154 <Normal+0xc2>
     150:	0e 94 c8 00 	call	0x190	; 0x190 <pedestrian>
	
	/****car signal is yellow****/
	CAR_SIGNAL_STATE=YELLOW;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
     15a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     15e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     162:	8c 01       	movw	r16, r24
     164:	21 e0       	ldi	r18, 0x01	; 1
     166:	42 e4       	ldi	r20, 0x42	; 66
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	81 e4       	ldi	r24, 0x41	; 65
     16c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
	LED_off(LED_CAR_PORT,LED_CAR_YELLOW);	
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	81 e4       	ldi	r24, 0x41	; 65
     174:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	LED_off(LED_walking_PORT,LED_walking_YELLOW);
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	82 e4       	ldi	r24, 0x42	; 66
     17c:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	if (interrupt==ON)pedestrian();
     180:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <interrupt>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	09 f0       	breq	.+2      	; 0x18a <Normal+0xf8>
     188:	8c cf       	rjmp	.-232    	; 0xa2 <Normal+0x10>
     18a:	0e 94 c8 00 	call	0x190	; 0x190 <pedestrian>
	}
     18e:	89 cf       	rjmp	.-238    	; 0xa2 <Normal+0x10>

00000190 <pedestrian>:
}



void pedestrian(void){
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62

	
	switch(CAR_SIGNAL_STATE){
     19c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	91 05       	cpc	r25, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <pedestrian+0x1c>
     1aa:	5e c0       	rjmp	.+188    	; 0x268 <pedestrian+0xd8>
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	91 05       	cpc	r25, r1
     1b0:	21 f0       	breq	.+8      	; 0x1ba <pedestrian+0x2a>
     1b2:	89 2b       	or	r24, r25
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <pedestrian+0x28>
     1b6:	af c0       	rjmp	.+350    	; 0x316 <pedestrian+0x186>
     1b8:	dc c0       	rjmp	.+440    	; 0x372 <pedestrian+0x1e2>
		case GREEN: 
		LED_on(LED_CAR_PORT,LED_CAR_GREEN);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	81 e4       	ldi	r24, 0x41	; 65
     1be:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
		LED_on(LED_walking_PORT,LED_walking_RED);
     1c2:	62 e0       	ldi	r22, 0x02	; 2
     1c4:	82 e4       	ldi	r24, 0x42	; 66
     1c6:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
		delay(time_millis);
     1ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1d2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
		LED_off(LED_CAR_PORT,LED_CAR_GREEN);
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	81 e4       	ldi	r24, 0x41	; 65
     1da:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		LED_off(LED_walking_PORT,LED_walking_RED);
     1de:	62 e0       	ldi	r22, 0x02	; 2
     1e0:	82 e4       	ldi	r24, 0x42	; 66
     1e2:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
	
		_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
     1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ea:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1ee:	8c 01       	movw	r16, r24
     1f0:	21 e0       	ldi	r18, 0x01	; 1
     1f2:	42 e4       	ldi	r20, 0x42	; 66
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	81 e4       	ldi	r24, 0x41	; 65
     1f8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW);
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	81 e4       	ldi	r24, 0x41	; 65
     200:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		LED_off(LED_walking_PORT,LED_walking_YELLOW);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	82 e4       	ldi	r24, 0x42	; 66
     208:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		
		LED_on(LED_CAR_PORT,LED_CAR_RED);
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	81 e4       	ldi	r24, 0x41	; 65
     210:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
		LED_on(LED_walking_PORT,LED_walking_GREEN);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	82 e4       	ldi	r24, 0x42	; 66
     218:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
		delay(time_millis);
     21c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     220:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     224:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
		LED_off(LED_CAR_PORT,LED_CAR_RED);
     228:	62 e0       	ldi	r22, 0x02	; 2
     22a:	81 e4       	ldi	r24, 0x41	; 65
     22c:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		
		_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
     230:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     234:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     238:	8c 01       	movw	r16, r24
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	42 e4       	ldi	r20, 0x42	; 66
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	81 e4       	ldi	r24, 0x41	; 65
     242:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	81 e4       	ldi	r24, 0x41	; 65
     24a:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		LED_off(LED_walking_PORT,LED_walking_YELLOW);
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	82 e4       	ldi	r24, 0x42	; 66
     252:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		LED_off(LED_walking_PORT,LED_walking_GREEN);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	82 e4       	ldi	r24, 0x42	; 66
     25a:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		
	
		interrupt=OFF;
     25e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <interrupt>
		 Normal();break;
     262:	0e 94 49 00 	call	0x92	; 0x92 <Normal>
     266:	88 c0       	rjmp	.+272    	; 0x378 <pedestrian+0x1e8>
		
		case YELLOW:
			LED_on(LED_CAR_PORT,LED_CAR_GREEN);
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	81 e4       	ldi	r24, 0x41	; 65
     26c:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
			LED_on(LED_walking_PORT,LED_walking_RED);
     270:	62 e0       	ldi	r22, 0x02	; 2
     272:	82 e4       	ldi	r24, 0x42	; 66
     274:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
			delay(time_millis);
     278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     27c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     280:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
			LED_off(LED_CAR_PORT,LED_CAR_GREEN);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	81 e4       	ldi	r24, 0x41	; 65
     288:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			LED_off(LED_walking_PORT,LED_walking_RED);
     28c:	62 e0       	ldi	r22, 0x02	; 2
     28e:	82 e4       	ldi	r24, 0x42	; 66
     290:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			
			_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
     294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     298:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     29c:	8c 01       	movw	r16, r24
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	42 e4       	ldi	r20, 0x42	; 66
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	81 e4       	ldi	r24, 0x41	; 65
     2a6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
			LED_off(LED_CAR_PORT,LED_CAR_YELLOW);
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	81 e4       	ldi	r24, 0x41	; 65
     2ae:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			LED_off(LED_walking_PORT,LED_walking_YELLOW);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	82 e4       	ldi	r24, 0x42	; 66
     2b6:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			
			LED_on(LED_CAR_PORT,LED_CAR_RED);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	81 e4       	ldi	r24, 0x41	; 65
     2be:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
			LED_on(LED_walking_PORT,LED_walking_GREEN);
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	82 e4       	ldi	r24, 0x42	; 66
     2c6:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
			delay(time_millis);
     2ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2ce:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2d2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
			LED_off(LED_CAR_PORT,LED_CAR_RED);
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	81 e4       	ldi	r24, 0x41	; 65
     2da:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			
			_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
     2de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2e6:	8c 01       	movw	r16, r24
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	42 e4       	ldi	r20, 0x42	; 66
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	81 e4       	ldi	r24, 0x41	; 65
     2f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
			LED_off(LED_CAR_PORT,LED_CAR_YELLOW);
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	81 e4       	ldi	r24, 0x41	; 65
     2f8:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			LED_off(LED_walking_PORT,LED_walking_YELLOW);
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	82 e4       	ldi	r24, 0x42	; 66
     300:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			LED_off(LED_walking_PORT,LED_walking_GREEN);
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	82 e4       	ldi	r24, 0x42	; 66
     308:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
			
		interrupt=OFF;
     30c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <interrupt>
		Normal();
     310:	0e 94 49 00 	call	0x92	; 0x92 <Normal>
		break;
     314:	31 c0       	rjmp	.+98     	; 0x378 <pedestrian+0x1e8>
		
		case RED:
		LED_on(LED_CAR_PORT,LED_CAR_RED);
     316:	62 e0       	ldi	r22, 0x02	; 2
     318:	81 e4       	ldi	r24, 0x41	; 65
     31a:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
		LED_on(LED_walking_PORT,LED_walking_GREEN);
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	82 e4       	ldi	r24, 0x42	; 66
     322:	0e 94 2e 02 	call	0x45c	; 0x45c <LED_on>
		delay(time_millis);
     326:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     32a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     32e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
		
		LED_off(LED_CAR_PORT,LED_CAR_RED);
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	81 e4       	ldi	r24, 0x41	; 65
     336:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		
		
		_2_LED_blink(LED_CAR_PORT,LED_CAR_YELLOW,LED_walking_PORT,LED_walking_YELLOW,time_millis);
     33a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     33e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     342:	8c 01       	movw	r16, r24
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	42 e4       	ldi	r20, 0x42	; 66
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	81 e4       	ldi	r24, 0x41	; 65
     34c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_2_LED_blink>
		LED_off(LED_CAR_PORT,LED_CAR_YELLOW);
     350:	61 e0       	ldi	r22, 0x01	; 1
     352:	81 e4       	ldi	r24, 0x41	; 65
     354:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		LED_off(LED_walking_PORT,LED_walking_YELLOW);
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	82 e4       	ldi	r24, 0x42	; 66
     35c:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		LED_off(LED_walking_PORT,LED_walking_GREEN);
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	82 e4       	ldi	r24, 0x42	; 66
     364:	0e 94 40 02 	call	0x480	; 0x480 <LED_off>
		
		interrupt=OFF;
     368:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <interrupt>
		Normal();
     36c:	0e 94 49 00 	call	0x92	; 0x92 <Normal>
		break;
     370:	03 c0       	rjmp	.+6      	; 0x378 <pedestrian+0x1e8>
		
		default:Normal();break;
     372:	0e 94 49 00 	call	0x92	; 0x92 <Normal>
     376:	00 00       	nop
	}
	
	
}
     378:	00 00       	nop
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <app_start>:



void app_start(void){
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
Normal();
     38c:	0e 94 49 00 	call	0x92	; 0x92 <Normal>
}
     390:	00 00       	nop
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <app_init>:

void app_init(void){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62

	INT0_init_rising();
     3a0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <INT0_init_rising>
	
	Button_init(PORTD,2);// set button in INT0 pin
     3a4:	62 e0       	ldi	r22, 0x02	; 2
     3a6:	84 e4       	ldi	r24, 0x44	; 68
     3a8:	0e 94 0a 02 	call	0x414	; 0x414 <Button_init>
	

	/*initializing CAR TRAFFIC LIGHTS*/
	LED_init(LED_CAR_PORT,LED_CAR_GREEN);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	81 e4       	ldi	r24, 0x41	; 65
     3b0:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_YELLOW);
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	81 e4       	ldi	r24, 0x41	; 65
     3b8:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_RED);
     3bc:	62 e0       	ldi	r22, 0x02	; 2
     3be:	81 e4       	ldi	r24, 0x41	; 65
     3c0:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>

	LED_init(LED_walking_PORT,LED_walking_GREEN);
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	82 e4       	ldi	r24, 0x42	; 66
     3c8:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_walking_PORT,LED_walking_YELLOW);
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	82 e4       	ldi	r24, 0x42	; 66
     3d0:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	LED_init(LED_walking_PORT,LED_walking_RED);
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	82 e4       	ldi	r24, 0x42	; 66
     3d8:	0e 94 1c 02 	call	0x438	; 0x438 <LED_init>
	
}
     3dc:	00 00       	nop
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <__vector_1>:
		
 	ISR(EXT_INT_0){
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     3ec:	0f 92       	push	r0
     3ee:	11 24       	eor	r1, r1
     3f0:	8f 93       	push	r24
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
 	interrupt=ON;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <interrupt>
 	}
     400:	00 00       	nop
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	8f 91       	pop	r24
     408:	0f 90       	pop	r0
     40a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <Button_init>:
#include "Button.h"



void Button_init(uint8_t buttonPort, uint8_t buttonPin)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <Button_init+0x6>
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	89 83       	std	Y+1, r24	; 0x01
     420:	6a 83       	std	Y+2, r22	; 0x02
	
	DIO_setPIN_DIR(buttonPort,buttonPin,INPUT);
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	6a 81       	ldd	r22, Y+2	; 0x02
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_setPIN_DIR>
}
     42c:	00 00       	nop
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <LED_init>:
	delay(200);
	LED_toggle(ledPort,ledPin);
	delay(200);
	N_blinks++;
}
}
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	00 d0       	rcall	.+0      	; 0x43e <LED_init+0x6>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	6a 83       	std	Y+2, r22	; 0x02
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	6a 81       	ldd	r22, Y+2	; 0x02
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_setPIN_DIR>
     450:	00 00       	nop
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <LED_on>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <LED_on+0x6>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	6a 83       	std	Y+2, r22	; 0x02
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	6a 81       	ldd	r22, Y+2	; 0x02
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_write_PIN>
     474:	00 00       	nop
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <LED_off>:
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <LED_off+0x6>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	6a 83       	std	Y+2, r22	; 0x02
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	6a 81       	ldd	r22, Y+2	; 0x02
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_write_PIN>
     498:	00 00       	nop
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <LED_toggle>:
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <LED_toggle+0x6>
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	89 83       	std	Y+1, r24	; 0x01
     4b0:	6a 83       	std	Y+2, r22	; 0x02
     4b2:	6a 81       	ldd	r22, Y+2	; 0x02
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_toggle_PIN>
     4ba:	00 00       	nop
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <_2_LED_blink>:

void _2_LED_blink(uint8_t ledPort_1, uint8_t ledPin_1,uint8_t ledPort_2, uint8_t ledPin_2,uint32_t delay_millis)
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	2a 97       	sbiw	r28, 0x0a	; 10
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	8d 83       	std	Y+5, r24	; 0x05
     4e0:	6e 83       	std	Y+6, r22	; 0x06
     4e2:	4f 83       	std	Y+7, r20	; 0x07
     4e4:	28 87       	std	Y+8, r18	; 0x08
     4e6:	1a 87       	std	Y+10, r17	; 0x0a
     4e8:	09 87       	std	Y+9, r16	; 0x09
		uint32_t max= (delay_millis)/400; 
     4ea:	89 85       	ldd	r24, Y+9	; 0x09
     4ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ee:	92 95       	swap	r25
     4f0:	82 95       	swap	r24
     4f2:	8f 70       	andi	r24, 0x0F	; 15
     4f4:	89 27       	eor	r24, r25
     4f6:	9f 70       	andi	r25, 0x0F	; 15
     4f8:	89 27       	eor	r24, r25
     4fa:	9c 01       	movw	r18, r24
     4fc:	ae e3       	ldi	r26, 0x3E	; 62
     4fe:	ba e0       	ldi	r27, 0x0A	; 10
     500:	0e 94 c5 08 	call	0x118a	; 0x118a <__umulhisi3>
     504:	9c 83       	std	Y+4, r25	; 0x04
     506:	8b 83       	std	Y+3, r24	; 0x03
		uint32_t N_blinks=0;
     508:	1a 82       	std	Y+2, r1	; 0x02
     50a:	19 82       	std	Y+1, r1	; 0x01
		while(N_blinks<max){
     50c:	1d c0       	rjmp	.+58     	; 0x548 <_2_LED_blink+0x82>
			LED_toggle(ledPort_1,ledPin_1);
     50e:	6e 81       	ldd	r22, Y+6	; 0x06
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_toggle>
			LED_toggle(ledPort_2,ledPin_2);
     516:	68 85       	ldd	r22, Y+8	; 0x08
     518:	8f 81       	ldd	r24, Y+7	; 0x07
     51a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_toggle>
			delay(200);
     51e:	88 ec       	ldi	r24, 0xC8	; 200
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
			LED_toggle(ledPort_1,ledPin_1);
     526:	6e 81       	ldd	r22, Y+6	; 0x06
     528:	8d 81       	ldd	r24, Y+5	; 0x05
     52a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_toggle>
			LED_toggle(ledPort_2,ledPin_2);
     52e:	68 85       	ldd	r22, Y+8	; 0x08
     530:	8f 81       	ldd	r24, Y+7	; 0x07
     532:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED_toggle>
			delay(200);
     536:	88 ec       	ldi	r24, 0xC8	; 200
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <delay>
			N_blinks++;
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	89 83       	std	Y+1, r24	; 0x01

void _2_LED_blink(uint8_t ledPort_1, uint8_t ledPin_1,uint8_t ledPort_2, uint8_t ledPin_2,uint32_t delay_millis)
{
		uint32_t max= (delay_millis)/400; 
		uint32_t N_blinks=0;
		while(N_blinks<max){
     548:	29 81       	ldd	r18, Y+1	; 0x01
     54a:	3a 81       	ldd	r19, Y+2	; 0x02
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	28 17       	cp	r18, r24
     552:	39 07       	cpc	r19, r25
     554:	e0 f2       	brcs	.-72     	; 0x50e <_2_LED_blink+0x48>
			LED_toggle(ledPort_1,ledPin_1);
			LED_toggle(ledPort_2,ledPin_2);
			delay(200);
			N_blinks++;
		}
	}
     556:	00 00       	nop
     558:	2a 96       	adiw	r28, 0x0a	; 10
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <main>:

 
 #include "app/app.h"

int main(void)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
	app_init();
     576:	0e 94 cc 01 	call	0x398	; 0x398 <app_init>
	
	app_start();
     57a:	0e 94 c2 01 	call	0x384	; 0x384 <app_start>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
	
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <DIO_setPIN_DIR>:

		}
		else
		 Local_uint8_tErrorState = STD_TYPES_NOK;
		return value;
	}
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	00 d0       	rcall	.+0      	; 0x58e <DIO_setPIN_DIR+0x6>
     58e:	00 d0       	rcall	.+0      	; 0x590 <DIO_setPIN_DIR+0x8>
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	8a 83       	std	Y+2, r24	; 0x02
     596:	6b 83       	std	Y+3, r22	; 0x03
     598:	4c 83       	std	Y+4, r20	; 0x04
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	8a 81       	ldd	r24, Y+2	; 0x02
     5a0:	81 34       	cpi	r24, 0x41	; 65
     5a2:	51 f0       	breq	.+20     	; 0x5b8 <DIO_setPIN_DIR+0x30>
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	82 34       	cpi	r24, 0x42	; 66
     5a8:	39 f0       	breq	.+14     	; 0x5b8 <DIO_setPIN_DIR+0x30>
     5aa:	8a 81       	ldd	r24, Y+2	; 0x02
     5ac:	83 34       	cpi	r24, 0x43	; 67
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <DIO_setPIN_DIR+0x30>
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	84 34       	cpi	r24, 0x44	; 68
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <DIO_setPIN_DIR+0x30>
     5b6:	dd c0       	rjmp	.+442    	; 0x772 <DIO_setPIN_DIR+0x1ea>
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	88 30       	cpi	r24, 0x08	; 8
     5bc:	08 f0       	brcs	.+2      	; 0x5c0 <DIO_setPIN_DIR+0x38>
     5be:	d9 c0       	rjmp	.+434    	; 0x772 <DIO_setPIN_DIR+0x1ea>
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	88 23       	and	r24, r24
     5c4:	21 f0       	breq	.+8      	; 0x5ce <DIO_setPIN_DIR+0x46>
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <DIO_setPIN_DIR+0x46>
     5cc:	d2 c0       	rjmp	.+420    	; 0x772 <DIO_setPIN_DIR+0x1ea>
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	82 34       	cpi	r24, 0x42	; 66
     5d6:	91 05       	cpc	r25, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <DIO_setPIN_DIR+0x54>
     5da:	3e c0       	rjmp	.+124    	; 0x658 <DIO_setPIN_DIR+0xd0>
     5dc:	83 34       	cpi	r24, 0x43	; 67
     5de:	91 05       	cpc	r25, r1
     5e0:	24 f4       	brge	.+8      	; 0x5ea <DIO_setPIN_DIR+0x62>
     5e2:	81 34       	cpi	r24, 0x41	; 65
     5e4:	91 05       	cpc	r25, r1
     5e6:	51 f0       	breq	.+20     	; 0x5fc <DIO_setPIN_DIR+0x74>
     5e8:	c1 c0       	rjmp	.+386    	; 0x76c <DIO_setPIN_DIR+0x1e4>
     5ea:	83 34       	cpi	r24, 0x43	; 67
     5ec:	91 05       	cpc	r25, r1
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <DIO_setPIN_DIR+0x6a>
     5f0:	61 c0       	rjmp	.+194    	; 0x6b4 <DIO_setPIN_DIR+0x12c>
     5f2:	84 34       	cpi	r24, 0x44	; 68
     5f4:	91 05       	cpc	r25, r1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <DIO_setPIN_DIR+0x72>
     5f8:	8b c0       	rjmp	.+278    	; 0x710 <DIO_setPIN_DIR+0x188>
     5fa:	b8 c0       	rjmp	.+368    	; 0x76c <DIO_setPIN_DIR+0x1e4>
     5fc:	8c 81       	ldd	r24, Y+4	; 0x04
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	a9 f4       	brne	.+42     	; 0x62c <DIO_setPIN_DIR+0xa4>
     602:	8a e3       	ldi	r24, 0x3A	; 58
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2a e3       	ldi	r18, 0x3A	; 58
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	f9 01       	movw	r30, r18
     60c:	20 81       	ld	r18, Z
     60e:	62 2f       	mov	r22, r18
     610:	2b 81       	ldd	r18, Y+3	; 0x03
     612:	42 2f       	mov	r20, r18
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_setPIN_DIR+0x98>
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	4a 95       	dec	r20
     622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_setPIN_DIR+0x94>
     624:	26 2b       	or	r18, r22
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	a2 c0       	rjmp	.+324    	; 0x770 <DIO_setPIN_DIR+0x1e8>
     62c:	8a e3       	ldi	r24, 0x3A	; 58
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	2a e3       	ldi	r18, 0x3A	; 58
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	62 2f       	mov	r22, r18
     63a:	2b 81       	ldd	r18, Y+3	; 0x03
     63c:	42 2f       	mov	r20, r18
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_setPIN_DIR+0xc2>
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	4a 95       	dec	r20
     64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_setPIN_DIR+0xbe>
     64e:	20 95       	com	r18
     650:	26 23       	and	r18, r22
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
     656:	8c c0       	rjmp	.+280    	; 0x770 <DIO_setPIN_DIR+0x1e8>
     658:	8c 81       	ldd	r24, Y+4	; 0x04
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	a9 f4       	brne	.+42     	; 0x688 <DIO_setPIN_DIR+0x100>
     65e:	87 e3       	ldi	r24, 0x37	; 55
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	27 e3       	ldi	r18, 0x37	; 55
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	62 2f       	mov	r22, r18
     66c:	2b 81       	ldd	r18, Y+3	; 0x03
     66e:	42 2f       	mov	r20, r18
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	21 e0       	ldi	r18, 0x01	; 1
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_setPIN_DIR+0xf4>
     678:	22 0f       	add	r18, r18
     67a:	33 1f       	adc	r19, r19
     67c:	4a 95       	dec	r20
     67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_setPIN_DIR+0xf0>
     680:	26 2b       	or	r18, r22
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
     686:	74 c0       	rjmp	.+232    	; 0x770 <DIO_setPIN_DIR+0x1e8>
     688:	87 e3       	ldi	r24, 0x37	; 55
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	27 e3       	ldi	r18, 0x37	; 55
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	f9 01       	movw	r30, r18
     692:	20 81       	ld	r18, Z
     694:	62 2f       	mov	r22, r18
     696:	2b 81       	ldd	r18, Y+3	; 0x03
     698:	42 2f       	mov	r20, r18
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_setPIN_DIR+0x11e>
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	4a 95       	dec	r20
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_setPIN_DIR+0x11a>
     6aa:	20 95       	com	r18
     6ac:	26 23       	and	r18, r22
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
     6b2:	5e c0       	rjmp	.+188    	; 0x770 <DIO_setPIN_DIR+0x1e8>
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	a9 f4       	brne	.+42     	; 0x6e4 <DIO_setPIN_DIR+0x15c>
     6ba:	84 e3       	ldi	r24, 0x34	; 52
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	24 e3       	ldi	r18, 0x34	; 52
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	62 2f       	mov	r22, r18
     6c8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ca:	42 2f       	mov	r20, r18
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_setPIN_DIR+0x150>
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	4a 95       	dec	r20
     6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_setPIN_DIR+0x14c>
     6dc:	26 2b       	or	r18, r22
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
     6e2:	46 c0       	rjmp	.+140    	; 0x770 <DIO_setPIN_DIR+0x1e8>
     6e4:	84 e3       	ldi	r24, 0x34	; 52
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	24 e3       	ldi	r18, 0x34	; 52
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	62 2f       	mov	r22, r18
     6f2:	2b 81       	ldd	r18, Y+3	; 0x03
     6f4:	42 2f       	mov	r20, r18
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_setPIN_DIR+0x17a>
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	4a 95       	dec	r20
     704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_setPIN_DIR+0x176>
     706:	20 95       	com	r18
     708:	26 23       	and	r18, r22
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
     70e:	30 c0       	rjmp	.+96     	; 0x770 <DIO_setPIN_DIR+0x1e8>
     710:	8c 81       	ldd	r24, Y+4	; 0x04
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	a9 f4       	brne	.+42     	; 0x740 <DIO_setPIN_DIR+0x1b8>
     716:	81 e3       	ldi	r24, 0x31	; 49
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	21 e3       	ldi	r18, 0x31	; 49
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	62 2f       	mov	r22, r18
     724:	2b 81       	ldd	r18, Y+3	; 0x03
     726:	42 2f       	mov	r20, r18
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_setPIN_DIR+0x1ac>
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	4a 95       	dec	r20
     736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_setPIN_DIR+0x1a8>
     738:	26 2b       	or	r18, r22
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
     73e:	18 c0       	rjmp	.+48     	; 0x770 <DIO_setPIN_DIR+0x1e8>
     740:	81 e3       	ldi	r24, 0x31	; 49
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	21 e3       	ldi	r18, 0x31	; 49
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	62 2f       	mov	r22, r18
     74e:	2b 81       	ldd	r18, Y+3	; 0x03
     750:	42 2f       	mov	r20, r18
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_setPIN_DIR+0x1d6>
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	4a 95       	dec	r20
     760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_setPIN_DIR+0x1d2>
     762:	20 95       	com	r18
     764:	26 23       	and	r18, r22
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_setPIN_DIR+0x1e8>
     76c:	19 82       	std	Y+1, r1	; 0x01
     76e:	00 00       	nop
     770:	01 c0       	rjmp	.+2      	; 0x774 <DIO_setPIN_DIR+0x1ec>
     772:	19 82       	std	Y+1, r1	; 0x01
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <DIO_write_PIN>:


	uint8_t DIO_write_PIN(uint8_t portnum,uint8_t pinnum,uint8_t value)
	{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <DIO_write_PIN+0x6>
     78a:	00 d0       	rcall	.+0      	; 0x78c <DIO_write_PIN+0x8>
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	8a 83       	std	Y+2, r24	; 0x02
     792:	6b 83       	std	Y+3, r22	; 0x03
     794:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	89 83       	std	Y+1, r24	; 0x01

		if (((portnum==PORTA)||(portnum==PORTB)||(portnum==PORTC)||(portnum==PORTD))&& (pinnum<=PIN7)&&((value==HIGH)||(value==LOW)))
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	81 34       	cpi	r24, 0x41	; 65
     79e:	51 f0       	breq	.+20     	; 0x7b4 <DIO_write_PIN+0x30>
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	82 34       	cpi	r24, 0x42	; 66
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <DIO_write_PIN+0x30>
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	83 34       	cpi	r24, 0x43	; 67
     7aa:	21 f0       	breq	.+8      	; 0x7b4 <DIO_write_PIN+0x30>
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	84 34       	cpi	r24, 0x44	; 68
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <DIO_write_PIN+0x30>
     7b2:	dd c0       	rjmp	.+442    	; 0x96e <__stack+0x10f>
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	08 f0       	brcs	.+2      	; 0x7bc <DIO_write_PIN+0x38>
     7ba:	d9 c0       	rjmp	.+434    	; 0x96e <__stack+0x10f>
     7bc:	8c 81       	ldd	r24, Y+4	; 0x04
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	21 f0       	breq	.+8      	; 0x7ca <DIO_write_PIN+0x46>
     7c2:	8c 81       	ldd	r24, Y+4	; 0x04
     7c4:	88 23       	and	r24, r24
     7c6:	09 f0       	breq	.+2      	; 0x7ca <DIO_write_PIN+0x46>
     7c8:	d2 c0       	rjmp	.+420    	; 0x96e <__stack+0x10f>
		{
			switch(portnum)
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	82 34       	cpi	r24, 0x42	; 66
     7d2:	91 05       	cpc	r25, r1
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <DIO_write_PIN+0x54>
     7d6:	3e c0       	rjmp	.+124    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     7d8:	83 34       	cpi	r24, 0x43	; 67
     7da:	91 05       	cpc	r25, r1
     7dc:	24 f4       	brge	.+8      	; 0x7e6 <DIO_write_PIN+0x62>
     7de:	81 34       	cpi	r24, 0x41	; 65
     7e0:	91 05       	cpc	r25, r1
     7e2:	51 f0       	breq	.+20     	; 0x7f8 <DIO_write_PIN+0x74>
     7e4:	c1 c0       	rjmp	.+386    	; 0x968 <__stack+0x109>
     7e6:	83 34       	cpi	r24, 0x43	; 67
     7e8:	91 05       	cpc	r25, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <DIO_write_PIN+0x6a>
     7ec:	61 c0       	rjmp	.+194    	; 0x8b0 <__stack+0x51>
     7ee:	84 34       	cpi	r24, 0x44	; 68
     7f0:	91 05       	cpc	r25, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <DIO_write_PIN+0x72>
     7f4:	8b c0       	rjmp	.+278    	; 0x90c <__stack+0xad>
     7f6:	b8 c0       	rjmp	.+368    	; 0x968 <__stack+0x109>
			{
				case PORTA:
				if (value==HIGH){ SET_BIT(PORTA_REG,pinnum);}
     7f8:	8c 81       	ldd	r24, Y+4	; 0x04
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	a9 f4       	brne	.+42     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7fe:	8b e3       	ldi	r24, 0x3B	; 59
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2b e3       	ldi	r18, 0x3B	; 59
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	62 2f       	mov	r22, r18
     80c:	2b 81       	ldd	r18, Y+3	; 0x03
     80e:	42 2f       	mov	r20, r18
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	4a 95       	dec	r20
     81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     820:	26 2b       	or	r18, r22
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
				else {CLR_BIT(PORTA_REG,pinnum);}
				break;
     826:	a2 c0       	rjmp	.+324    	; 0x96c <__stack+0x10d>
		{
			switch(portnum)
			{
				case PORTA:
				if (value==HIGH){ SET_BIT(PORTA_REG,pinnum);}
				else {CLR_BIT(PORTA_REG,pinnum);}
     828:	8b e3       	ldi	r24, 0x3B	; 59
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	2b e3       	ldi	r18, 0x3B	; 59
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	20 81       	ld	r18, Z
     834:	62 2f       	mov	r22, r18
     836:	2b 81       	ldd	r18, Y+3	; 0x03
     838:	42 2f       	mov	r20, r18
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     842:	22 0f       	add	r18, r18
     844:	33 1f       	adc	r19, r19
     846:	4a 95       	dec	r20
     848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     84a:	20 95       	com	r18
     84c:	26 23       	and	r18, r22
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
				break;
     852:	8c c0       	rjmp	.+280    	; 0x96c <__stack+0x10d>

				case PORTB:
				if (value==HIGH){ SET_BIT(PORTB_REG,pinnum);}
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	a9 f4       	brne	.+42     	; 0x884 <__stack+0x25>
     85a:	88 e3       	ldi	r24, 0x38	; 56
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	28 e3       	ldi	r18, 0x38	; 56
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	62 2f       	mov	r22, r18
     868:	2b 81       	ldd	r18, Y+3	; 0x03
     86a:	42 2f       	mov	r20, r18
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	4a 95       	dec	r20
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	26 2b       	or	r18, r22
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
				else {CLR_BIT(PORTB_REG,pinnum);}
				break;
     882:	74 c0       	rjmp	.+232    	; 0x96c <__stack+0x10d>
				else {CLR_BIT(PORTA_REG,pinnum);}
				break;

				case PORTB:
				if (value==HIGH){ SET_BIT(PORTB_REG,pinnum);}
				else {CLR_BIT(PORTB_REG,pinnum);}
     884:	88 e3       	ldi	r24, 0x38	; 56
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	28 e3       	ldi	r18, 0x38	; 56
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	62 2f       	mov	r22, r18
     892:	2b 81       	ldd	r18, Y+3	; 0x03
     894:	42 2f       	mov	r20, r18
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	22 0f       	add	r18, r18
     8a0:	33 1f       	adc	r19, r19
     8a2:	4a 95       	dec	r20
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
     8a6:	20 95       	com	r18
     8a8:	26 23       	and	r18, r22
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
				break;
     8ae:	5e c0       	rjmp	.+188    	; 0x96c <__stack+0x10d>

				case PORTC:
				if (value==HIGH){ SET_BIT(PORTC_REG,pinnum);}
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	a9 f4       	brne	.+42     	; 0x8e0 <__stack+0x81>
     8b6:	85 e3       	ldi	r24, 0x35	; 53
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	25 e3       	ldi	r18, 0x35	; 53
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	20 81       	ld	r18, Z
     8c2:	62 2f       	mov	r22, r18
     8c4:	2b 81       	ldd	r18, Y+3	; 0x03
     8c6:	42 2f       	mov	r20, r18
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	22 0f       	add	r18, r18
     8d2:	33 1f       	adc	r19, r19
     8d4:	4a 95       	dec	r20
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	26 2b       	or	r18, r22
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
				else {CLR_BIT(PORTC_REG,pinnum);}
				break;
     8de:	46 c0       	rjmp	.+140    	; 0x96c <__stack+0x10d>
				else {CLR_BIT(PORTB_REG,pinnum);}
				break;

				case PORTC:
				if (value==HIGH){ SET_BIT(PORTC_REG,pinnum);}
				else {CLR_BIT(PORTC_REG,pinnum);}
     8e0:	85 e3       	ldi	r24, 0x35	; 53
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	25 e3       	ldi	r18, 0x35	; 53
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	f9 01       	movw	r30, r18
     8ea:	20 81       	ld	r18, Z
     8ec:	62 2f       	mov	r22, r18
     8ee:	2b 81       	ldd	r18, Y+3	; 0x03
     8f0:	42 2f       	mov	r20, r18
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	4a 95       	dec	r20
     900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
     902:	20 95       	com	r18
     904:	26 23       	and	r18, r22
     906:	fc 01       	movw	r30, r24
     908:	20 83       	st	Z, r18
				break;
     90a:	30 c0       	rjmp	.+96     	; 0x96c <__stack+0x10d>

				case PORTD:
				if (value==HIGH){ SET_BIT(PORTD_REG,pinnum);}
     90c:	8c 81       	ldd	r24, Y+4	; 0x04
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	a9 f4       	brne	.+42     	; 0x93c <__stack+0xdd>
     912:	82 e3       	ldi	r24, 0x32	; 50
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	22 e3       	ldi	r18, 0x32	; 50
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	62 2f       	mov	r22, r18
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	42 2f       	mov	r20, r18
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
     92c:	22 0f       	add	r18, r18
     92e:	33 1f       	adc	r19, r19
     930:	4a 95       	dec	r20
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
     934:	26 2b       	or	r18, r22
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
				else {CLR_BIT(PORTD_REG,pinnum);}
				break;
     93a:	18 c0       	rjmp	.+48     	; 0x96c <__stack+0x10d>
				else {CLR_BIT(PORTC_REG,pinnum);}
				break;

				case PORTD:
				if (value==HIGH){ SET_BIT(PORTD_REG,pinnum);}
				else {CLR_BIT(PORTD_REG,pinnum);}
     93c:	82 e3       	ldi	r24, 0x32	; 50
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	22 e3       	ldi	r18, 0x32	; 50
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	62 2f       	mov	r22, r18
     94a:	2b 81       	ldd	r18, Y+3	; 0x03
     94c:	42 2f       	mov	r20, r18
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	4a 95       	dec	r20
     95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
     95e:	20 95       	com	r18
     960:	26 23       	and	r18, r22
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
				break;
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>

				default: Local_uint8_tErrorState = STD_TYPES_NOK;break;
     968:	19 82       	std	Y+1, r1	; 0x01
     96a:	00 00       	nop
			}

		}
     96c:	01 c0       	rjmp	.+2      	; 0x970 <__stack+0x111>
		else
		 Local_uint8_tErrorState = STD_TYPES_NOK;
     96e:	19 82       	std	Y+1, r1	; 0x01
		return Local_uint8_tErrorState;
     970:	89 81       	ldd	r24, Y+1	; 0x01
	}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <DIO_toggle_PIN>:

	uint8_t DIO_toggle_PIN(uint8_t portnum,uint8_t pinnum)
	{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	00 d0       	rcall	.+0      	; 0x986 <DIO_toggle_PIN+0x6>
     986:	1f 92       	push	r1
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	8a 83       	std	Y+2, r24	; 0x02
     98e:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t Local_uint8_tErrorState = STD_TYPES_OK;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	89 83       	std	Y+1, r24	; 0x01

		if (((portnum==PORTA)||(portnum==PORTB)||(portnum==PORTC)||(portnum==PORTD))&& (pinnum<=PIN7))
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	81 34       	cpi	r24, 0x41	; 65
     998:	51 f0       	breq	.+20     	; 0x9ae <DIO_toggle_PIN+0x2e>
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	82 34       	cpi	r24, 0x42	; 66
     99e:	39 f0       	breq	.+14     	; 0x9ae <DIO_toggle_PIN+0x2e>
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	83 34       	cpi	r24, 0x43	; 67
     9a4:	21 f0       	breq	.+8      	; 0x9ae <DIO_toggle_PIN+0x2e>
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	84 34       	cpi	r24, 0x44	; 68
     9aa:	09 f0       	breq	.+2      	; 0x9ae <DIO_toggle_PIN+0x2e>
     9ac:	70 c0       	rjmp	.+224    	; 0xa8e <DIO_toggle_PIN+0x10e>
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	88 30       	cpi	r24, 0x08	; 8
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <DIO_toggle_PIN+0x36>
     9b4:	6c c0       	rjmp	.+216    	; 0xa8e <DIO_toggle_PIN+0x10e>
		{

			switch(portnum)
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 34       	cpi	r24, 0x42	; 66
     9be:	91 05       	cpc	r25, r1
     9c0:	21 f1       	breq	.+72     	; 0xa0a <DIO_toggle_PIN+0x8a>
     9c2:	83 34       	cpi	r24, 0x43	; 67
     9c4:	91 05       	cpc	r25, r1
     9c6:	24 f4       	brge	.+8      	; 0x9d0 <DIO_toggle_PIN+0x50>
     9c8:	81 34       	cpi	r24, 0x41	; 65
     9ca:	91 05       	cpc	r25, r1
     9cc:	49 f0       	breq	.+18     	; 0x9e0 <DIO_toggle_PIN+0x60>
     9ce:	5c c0       	rjmp	.+184    	; 0xa88 <DIO_toggle_PIN+0x108>
     9d0:	83 34       	cpi	r24, 0x43	; 67
     9d2:	91 05       	cpc	r25, r1
     9d4:	79 f1       	breq	.+94     	; 0xa34 <DIO_toggle_PIN+0xb4>
     9d6:	84 34       	cpi	r24, 0x44	; 68
     9d8:	91 05       	cpc	r25, r1
     9da:	09 f4       	brne	.+2      	; 0x9de <DIO_toggle_PIN+0x5e>
     9dc:	40 c0       	rjmp	.+128    	; 0xa5e <DIO_toggle_PIN+0xde>
     9de:	54 c0       	rjmp	.+168    	; 0xa88 <DIO_toggle_PIN+0x108>
			{
				case PORTA:	 TOGGLE_BIT(PORTA_REG,pinnum);
     9e0:	8b e3       	ldi	r24, 0x3B	; 59
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2b e3       	ldi	r18, 0x3B	; 59
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	62 2f       	mov	r22, r18
     9ee:	2b 81       	ldd	r18, Y+3	; 0x03
     9f0:	42 2f       	mov	r20, r18
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_toggle_PIN+0x7e>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	4a 95       	dec	r20
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_toggle_PIN+0x7a>
     a02:	26 27       	eor	r18, r22
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
				break;
     a08:	41 c0       	rjmp	.+130    	; 0xa8c <DIO_toggle_PIN+0x10c>

				case PORTB:	 TOGGLE_BIT(PORTB_REG,pinnum);
     a0a:	88 e3       	ldi	r24, 0x38	; 56
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	28 e3       	ldi	r18, 0x38	; 56
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	62 2f       	mov	r22, r18
     a18:	2b 81       	ldd	r18, Y+3	; 0x03
     a1a:	42 2f       	mov	r20, r18
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_toggle_PIN+0xa8>
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	4a 95       	dec	r20
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <DIO_toggle_PIN+0xa4>
     a2c:	26 27       	eor	r18, r22
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
				break;
     a32:	2c c0       	rjmp	.+88     	; 0xa8c <DIO_toggle_PIN+0x10c>

				case PORTC:	 TOGGLE_BIT(PORTC_REG,pinnum);
     a34:	85 e3       	ldi	r24, 0x35	; 53
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	25 e3       	ldi	r18, 0x35	; 53
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	f9 01       	movw	r30, r18
     a3e:	20 81       	ld	r18, Z
     a40:	62 2f       	mov	r22, r18
     a42:	2b 81       	ldd	r18, Y+3	; 0x03
     a44:	42 2f       	mov	r20, r18
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_toggle_PIN+0xd2>
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	4a 95       	dec	r20
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_toggle_PIN+0xce>
     a56:	26 27       	eor	r18, r22
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
				break;
     a5c:	17 c0       	rjmp	.+46     	; 0xa8c <DIO_toggle_PIN+0x10c>

				case PORTD:	 TOGGLE_BIT(PORTD_REG,pinnum);
     a5e:	82 e3       	ldi	r24, 0x32	; 50
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	22 e3       	ldi	r18, 0x32	; 50
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	f9 01       	movw	r30, r18
     a68:	20 81       	ld	r18, Z
     a6a:	62 2f       	mov	r22, r18
     a6c:	2b 81       	ldd	r18, Y+3	; 0x03
     a6e:	42 2f       	mov	r20, r18
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_toggle_PIN+0xfc>
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	4a 95       	dec	r20
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_toggle_PIN+0xf8>
     a80:	26 27       	eor	r18, r22
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
				break;
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_toggle_PIN+0x10c>

				default: Local_uint8_tErrorState = STD_TYPES_NOK;break;
     a88:	19 82       	std	Y+1, r1	; 0x01
     a8a:	00 00       	nop
			}

		}
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <DIO_toggle_PIN+0x110>
		else
		 Local_uint8_tErrorState = STD_TYPES_NOK;
     a8e:	19 82       	std	Y+1, r1	; 0x01
		return Local_uint8_tErrorState;
     a90:	89 81       	ldd	r24, Y+1	; 0x01
	}
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <INT0_init_rising>:
 */ 
#include "interrupts.h"
#include "../Lib/BIT_MATH.h"

void INT0_init_rising(void)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
	//  Enable global interrupt(setting bit 7 in status register to 1
	sei();  
     aa6:	78 94       	sei
	
	// Setting sense on the rising edge
	MCUCR_REG|=(1 << 0) | (1 << 1);
     aa8:	85 e5       	ldi	r24, 0x55	; 85
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	25 e5       	ldi	r18, 0x55	; 85
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	f9 01       	movw	r30, r18
     ab2:	20 81       	ld	r18, Z
     ab4:	23 60       	ori	r18, 0x03	; 3
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
	
	// Enable INT0
	SET_BIT(GICR_REG,6);
     aba:	8b e5       	ldi	r24, 0x5B	; 91
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	2b e5       	ldi	r18, 0x5B	; 91
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	f9 01       	movw	r30, r18
     ac4:	20 81       	ld	r18, Z
     ac6:	20 64       	ori	r18, 0x40	; 64
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
}
     acc:	00 00       	nop
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <timer_init>:
 *  Author: Mohamed Salah
 */ 

#include <math.h>
#include "Timer.h"
void timer_init(){
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG = 0x00; //set normal mode for timer0 and stop it
     adc:	83 e5       	ldi	r24, 0x53	; 83
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	fc 01       	movw	r30, r24
     ae2:	10 82       	st	Z, r1
	TCNT0_REG=0x00; // setting initial value for timer0
     ae4:	82 e5       	ldi	r24, 0x52	; 82
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	fc 01       	movw	r30, r24
     aea:	10 82       	st	Z, r1
}
     aec:	00 00       	nop
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <delay>:


void delay(uint32_t duration){
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	62 97       	sbiw	r28, 0x12	; 18
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	9a 8b       	std	Y+18, r25	; 0x12
     b12:	89 8b       	std	Y+17, r24	; 0x11
	
	timer_init();
     b14:	0e 94 6a 05 	call	0xad4	; 0xad4 <timer_init>
	uint32_t N_OverFlow,Timer_Initial,overFlow_Flag=0, duration_millisec=duration;	
     b18:	1e 82       	std	Y+6, r1	; 0x06
     b1a:	1d 82       	std	Y+5, r1	; 0x05
     b1c:	89 89       	ldd	r24, Y+17	; 0x11
     b1e:	9a 89       	ldd	r25, Y+18	; 0x12
     b20:	98 87       	std	Y+8, r25	; 0x08
     b22:	8f 83       	std	Y+7, r24	; 0x07
	T_maxdelay= T_tick * 2^(sizeof timer_regisetr)=(1/8 MHz)*2^(8) ;	
*/
	
	 
/******  with 1024 prescaler ********/
T_max= 32.768 ; // ms
     b24:	8f e6       	ldi	r24, 0x6F	; 111
     b26:	92 e1       	ldi	r25, 0x12	; 18
     b28:	a3 e0       	ldi	r26, 0x03	; 3
     b2a:	b2 e4       	ldi	r27, 0x42	; 66
     b2c:	89 87       	std	Y+9, r24	; 0x09
     b2e:	9a 87       	std	Y+10, r25	; 0x0a
     b30:	ab 87       	std	Y+11, r26	; 0x0b
     b32:	bc 87       	std	Y+12, r27	; 0x0c
T_tick = 0.128; //ms
     b34:	8f e6       	ldi	r24, 0x6F	; 111
     b36:	92 e1       	ldi	r25, 0x12	; 18
     b38:	a3 e0       	ldi	r26, 0x03	; 3
     b3a:	be e3       	ldi	r27, 0x3E	; 62
     b3c:	8d 87       	std	Y+13, r24	; 0x0d
     b3e:	9e 87       	std	Y+14, r25	; 0x0e
     b40:	af 87       	std	Y+15, r26	; 0x0f
     b42:	b8 8b       	std	Y+16, r27	; 0x10
	
	if(duration_millisec<T_max){
     b44:	8f 81       	ldd	r24, Y+7	; 0x07
     b46:	98 85       	ldd	r25, Y+8	; 0x08
     b48:	cc 01       	movw	r24, r24
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	29 85       	ldd	r18, Y+9	; 0x09
     b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b5e:	4b 85       	ldd	r20, Y+11	; 0x0b
     b60:	5c 85       	ldd	r21, Y+12	; 0x0c
     b62:	bc 01       	movw	r22, r24
     b64:	cd 01       	movw	r24, r26
     b66:	0e 94 25 07 	call	0xe4a	; 0xe4a <__cmpsf2>
     b6a:	88 23       	and	r24, r24
     b6c:	64 f5       	brge	.+88     	; 0xbc6 <delay+0xd2>
		Timer_Initial = (T_max-duration_millisec)/T_tick;
     b6e:	8f 81       	ldd	r24, Y+7	; 0x07
     b70:	98 85       	ldd	r25, Y+8	; 0x08
     b72:	cc 01       	movw	r24, r24
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	9c 01       	movw	r18, r24
     b86:	ad 01       	movw	r20, r26
     b88:	69 85       	ldd	r22, Y+9	; 0x09
     b8a:	7a 85       	ldd	r23, Y+10	; 0x0a
     b8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b90:	0e 94 a1 06 	call	0xd42	; 0xd42 <__subsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	2d 85       	ldd	r18, Y+13	; 0x0d
     b9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     b9c:	4f 85       	ldd	r20, Y+15	; 0x0f
     b9e:	58 89       	ldd	r21, Y+16	; 0x10
     ba0:	bc 01       	movw	r22, r24
     ba2:	cd 01       	movw	r24, r26
     ba4:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	bc 01       	movw	r22, r24
     bae:	cd 01       	movw	r24, r26
     bb0:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03
		N_OverFlow = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	74 c0       	rjmp	.+232    	; 0xcae <delay+0x1ba>
		}
		
	else if(duration_millisec == (int)T_max){
     bc6:	69 85       	ldd	r22, Y+9	; 0x09
     bc8:	7a 85       	ldd	r23, Y+10	; 0x0a
     bca:	8b 85       	ldd	r24, Y+11	; 0x0b
     bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bce:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	9c 01       	movw	r18, r24
     bd8:	8f 81       	ldd	r24, Y+7	; 0x07
     bda:	98 85       	ldd	r25, Y+8	; 0x08
     bdc:	28 17       	cp	r18, r24
     bde:	39 07       	cpc	r19, r25
     be0:	39 f4       	brne	.+14     	; 0xbf0 <delay+0xfc>
		Timer_Initial=0;
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	1b 82       	std	Y+3, r1	; 0x03
		N_OverFlow=1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	5f c0       	rjmp	.+190    	; 0xcae <delay+0x1ba>
		}
		
	else{
		N_OverFlow = ceil((double)duration_millisec/T_max);
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	98 85       	ldd	r25, Y+8	; 0x08
     bf4:	cc 01       	movw	r24, r24
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	29 85       	ldd	r18, Y+9	; 0x09
     c08:	3a 85       	ldd	r19, Y+10	; 0x0a
     c0a:	4b 85       	ldd	r20, Y+11	; 0x0b
     c0c:	5c 85       	ldd	r21, Y+12	; 0x0c
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <ceil>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
		Timer_Initial = 256 - ((double)duration_millisec/T_tick)/N_OverFlow;		
     c36:	8f 81       	ldd	r24, Y+7	; 0x07
     c38:	98 85       	ldd	r25, Y+8	; 0x08
     c3a:	cc 01       	movw	r24, r24
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c50:	4f 85       	ldd	r20, Y+15	; 0x0f
     c52:	58 89       	ldd	r21, Y+16	; 0x10
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	6c 01       	movw	r12, r24
     c62:	7d 01       	movw	r14, r26
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	cc 01       	movw	r24, r24
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	bc 01       	movw	r22, r24
     c70:	cd 01       	movw	r24, r26
     c72:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	9c 01       	movw	r18, r24
     c7c:	ad 01       	movw	r20, r26
     c7e:	c7 01       	movw	r24, r14
     c80:	b6 01       	movw	r22, r12
     c82:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9c 01       	movw	r18, r24
     c8c:	ad 01       	movw	r20, r26
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e8       	ldi	r24, 0x80	; 128
     c94:	93 e4       	ldi	r25, 0x43	; 67
     c96:	0e 94 a1 06 	call	0xd42	; 0xd42 <__subsf3>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
	}
	TCNT0_REG = Timer_Initial;
     cae:	82 e5       	ldi	r24, 0x52	; 82
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	2b 81       	ldd	r18, Y+3	; 0x03
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
	///// set prescaler to 1024
	SET_BIT(TCCR0_REG,0);
     cb8:	83 e5       	ldi	r24, 0x53	; 83
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	23 e5       	ldi	r18, 0x53	; 83
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	f9 01       	movw	r30, r18
     cc2:	20 81       	ld	r18, Z
     cc4:	21 60       	ori	r18, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
	SET_BIT(TCCR0_REG,2); 
     cca:	83 e5       	ldi	r24, 0x53	; 83
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	23 e5       	ldi	r18, 0x53	; 83
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	f9 01       	movw	r30, r18
     cd4:	20 81       	ld	r18, Z
     cd6:	24 60       	ori	r18, 0x04	; 4
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
	
	while(overFlow_Flag<N_OverFlow){
     cdc:	19 c0       	rjmp	.+50     	; 0xd10 <delay+0x21c>
		while(READ_BIT(TIFR_REG,0)==0);
     cde:	00 00       	nop
     ce0:	88 e5       	ldi	r24, 0x58	; 88
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	81 70       	andi	r24, 0x01	; 1
     cee:	99 27       	eor	r25, r25
     cf0:	89 2b       	or	r24, r25
     cf2:	b1 f3       	breq	.-20     	; 0xce0 <delay+0x1ec>
		//clear overflow flag
		SET_BIT(TIFR_REG,0);
     cf4:	88 e5       	ldi	r24, 0x58	; 88
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	28 e5       	ldi	r18, 0x58	; 88
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	f9 01       	movw	r30, r18
     cfe:	20 81       	ld	r18, Z
     d00:	21 60       	ori	r18, 0x01	; 1
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
		//increment counter
		overFlow_Flag++;
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	9e 83       	std	Y+6, r25	; 0x06
     d0e:	8d 83       	std	Y+5, r24	; 0x05
	TCNT0_REG = Timer_Initial;
	///// set prescaler to 1024
	SET_BIT(TCCR0_REG,0);
	SET_BIT(TCCR0_REG,2); 
	
	while(overFlow_Flag<N_OverFlow){
     d10:	2d 81       	ldd	r18, Y+5	; 0x05
     d12:	3e 81       	ldd	r19, Y+6	; 0x06
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	00 f3       	brcs	.-64     	; 0xcde <delay+0x1ea>
		SET_BIT(TIFR_REG,0);
		//increment counter
		overFlow_Flag++;
	}
	//Timer stop
	TCCR0_REG = 0x00;
     d1e:	83 e5       	ldi	r24, 0x53	; 83
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	fc 01       	movw	r30, r24
     d24:	10 82       	st	Z, r1
     d26:	00 00       	nop
     d28:	62 96       	adiw	r28, 0x12	; 18
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	08 95       	ret

00000d42 <__subsf3>:
     d42:	50 58       	subi	r21, 0x80	; 128

00000d44 <__addsf3>:
     d44:	bb 27       	eor	r27, r27
     d46:	aa 27       	eor	r26, r26
     d48:	0e 94 b9 06 	call	0xd72	; 0xd72 <__addsf3x>
     d4c:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     d50:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     d54:	38 f0       	brcs	.+14     	; 0xd64 <__addsf3+0x20>
     d56:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     d5a:	20 f0       	brcs	.+8      	; 0xd64 <__addsf3+0x20>
     d5c:	39 f4       	brne	.+14     	; 0xd6c <__addsf3+0x28>
     d5e:	9f 3f       	cpi	r25, 0xFF	; 255
     d60:	19 f4       	brne	.+6      	; 0xd68 <__addsf3+0x24>
     d62:	26 f4       	brtc	.+8      	; 0xd6c <__addsf3+0x28>
     d64:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>
     d68:	0e f4       	brtc	.+2      	; 0xd6c <__addsf3+0x28>
     d6a:	e0 95       	com	r30
     d6c:	e7 fb       	bst	r30, 7
     d6e:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_inf>

00000d72 <__addsf3x>:
     d72:	e9 2f       	mov	r30, r25
     d74:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     d78:	58 f3       	brcs	.-42     	; 0xd50 <__addsf3+0xc>
     d7a:	ba 17       	cp	r27, r26
     d7c:	62 07       	cpc	r22, r18
     d7e:	73 07       	cpc	r23, r19
     d80:	84 07       	cpc	r24, r20
     d82:	95 07       	cpc	r25, r21
     d84:	20 f0       	brcs	.+8      	; 0xd8e <__addsf3x+0x1c>
     d86:	79 f4       	brne	.+30     	; 0xda6 <__addsf3x+0x34>
     d88:	a6 f5       	brtc	.+104    	; 0xdf2 <__addsf3x+0x80>
     d8a:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_zero>
     d8e:	0e f4       	brtc	.+2      	; 0xd92 <__addsf3x+0x20>
     d90:	e0 95       	com	r30
     d92:	0b 2e       	mov	r0, r27
     d94:	ba 2f       	mov	r27, r26
     d96:	a0 2d       	mov	r26, r0
     d98:	0b 01       	movw	r0, r22
     d9a:	b9 01       	movw	r22, r18
     d9c:	90 01       	movw	r18, r0
     d9e:	0c 01       	movw	r0, r24
     da0:	ca 01       	movw	r24, r20
     da2:	a0 01       	movw	r20, r0
     da4:	11 24       	eor	r1, r1
     da6:	ff 27       	eor	r31, r31
     da8:	59 1b       	sub	r21, r25
     daa:	99 f0       	breq	.+38     	; 0xdd2 <__addsf3x+0x60>
     dac:	59 3f       	cpi	r21, 0xF9	; 249
     dae:	50 f4       	brcc	.+20     	; 0xdc4 <__addsf3x+0x52>
     db0:	50 3e       	cpi	r21, 0xE0	; 224
     db2:	68 f1       	brcs	.+90     	; 0xe0e <__addsf3x+0x9c>
     db4:	1a 16       	cp	r1, r26
     db6:	f0 40       	sbci	r31, 0x00	; 0
     db8:	a2 2f       	mov	r26, r18
     dba:	23 2f       	mov	r18, r19
     dbc:	34 2f       	mov	r19, r20
     dbe:	44 27       	eor	r20, r20
     dc0:	58 5f       	subi	r21, 0xF8	; 248
     dc2:	f3 cf       	rjmp	.-26     	; 0xdaa <__addsf3x+0x38>
     dc4:	46 95       	lsr	r20
     dc6:	37 95       	ror	r19
     dc8:	27 95       	ror	r18
     dca:	a7 95       	ror	r26
     dcc:	f0 40       	sbci	r31, 0x00	; 0
     dce:	53 95       	inc	r21
     dd0:	c9 f7       	brne	.-14     	; 0xdc4 <__addsf3x+0x52>
     dd2:	7e f4       	brtc	.+30     	; 0xdf2 <__addsf3x+0x80>
     dd4:	1f 16       	cp	r1, r31
     dd6:	ba 0b       	sbc	r27, r26
     dd8:	62 0b       	sbc	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	ba f0       	brmi	.+46     	; 0xe0e <__addsf3x+0x9c>
     de0:	91 50       	subi	r25, 0x01	; 1
     de2:	a1 f0       	breq	.+40     	; 0xe0c <__addsf3x+0x9a>
     de4:	ff 0f       	add	r31, r31
     de6:	bb 1f       	adc	r27, r27
     de8:	66 1f       	adc	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	88 1f       	adc	r24, r24
     dee:	c2 f7       	brpl	.-16     	; 0xde0 <__addsf3x+0x6e>
     df0:	0e c0       	rjmp	.+28     	; 0xe0e <__addsf3x+0x9c>
     df2:	ba 0f       	add	r27, r26
     df4:	62 1f       	adc	r22, r18
     df6:	73 1f       	adc	r23, r19
     df8:	84 1f       	adc	r24, r20
     dfa:	48 f4       	brcc	.+18     	; 0xe0e <__addsf3x+0x9c>
     dfc:	87 95       	ror	r24
     dfe:	77 95       	ror	r23
     e00:	67 95       	ror	r22
     e02:	b7 95       	ror	r27
     e04:	f7 95       	ror	r31
     e06:	9e 3f       	cpi	r25, 0xFE	; 254
     e08:	08 f0       	brcs	.+2      	; 0xe0c <__addsf3x+0x9a>
     e0a:	b0 cf       	rjmp	.-160    	; 0xd6c <__addsf3+0x28>
     e0c:	93 95       	inc	r25
     e0e:	88 0f       	add	r24, r24
     e10:	08 f0       	brcs	.+2      	; 0xe14 <__addsf3x+0xa2>
     e12:	99 27       	eor	r25, r25
     e14:	ee 0f       	add	r30, r30
     e16:	97 95       	ror	r25
     e18:	87 95       	ror	r24
     e1a:	08 95       	ret

00000e1c <ceil>:
     e1c:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_trunc>
     e20:	90 f0       	brcs	.+36     	; 0xe46 <ceil+0x2a>
     e22:	9f 37       	cpi	r25, 0x7F	; 127
     e24:	48 f4       	brcc	.+18     	; 0xe38 <ceil+0x1c>
     e26:	91 11       	cpse	r25, r1
     e28:	16 f4       	brtc	.+4      	; 0xe2e <ceil+0x12>
     e2a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	9f e3       	ldi	r25, 0x3F	; 63
     e36:	08 95       	ret
     e38:	26 f0       	brts	.+8      	; 0xe42 <ceil+0x26>
     e3a:	1b 16       	cp	r1, r27
     e3c:	61 1d       	adc	r22, r1
     e3e:	71 1d       	adc	r23, r1
     e40:	81 1d       	adc	r24, r1
     e42:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_mintl>
     e46:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_mpack>

00000e4a <__cmpsf2>:
     e4a:	0e 94 0f 08 	call	0x101e	; 0x101e <__fp_cmp>
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__cmpsf2+0x8>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	08 95       	ret

00000e54 <__divsf3>:
     e54:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__divsf3x>
     e58:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     e5c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     e60:	58 f0       	brcs	.+22     	; 0xe78 <__divsf3+0x24>
     e62:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     e66:	40 f0       	brcs	.+16     	; 0xe78 <__divsf3+0x24>
     e68:	29 f4       	brne	.+10     	; 0xe74 <__divsf3+0x20>
     e6a:	5f 3f       	cpi	r21, 0xFF	; 255
     e6c:	29 f0       	breq	.+10     	; 0xe78 <__divsf3+0x24>
     e6e:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_inf>
     e72:	51 11       	cpse	r21, r1
     e74:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
     e78:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>

00000e7c <__divsf3x>:
     e7c:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     e80:	68 f3       	brcs	.-38     	; 0xe5c <__divsf3+0x8>

00000e82 <__divsf3_pse>:
     e82:	99 23       	and	r25, r25
     e84:	b1 f3       	breq	.-20     	; 0xe72 <__divsf3+0x1e>
     e86:	55 23       	and	r21, r21
     e88:	91 f3       	breq	.-28     	; 0xe6e <__divsf3+0x1a>
     e8a:	95 1b       	sub	r25, r21
     e8c:	55 0b       	sbc	r21, r21
     e8e:	bb 27       	eor	r27, r27
     e90:	aa 27       	eor	r26, r26
     e92:	62 17       	cp	r22, r18
     e94:	73 07       	cpc	r23, r19
     e96:	84 07       	cpc	r24, r20
     e98:	38 f0       	brcs	.+14     	; 0xea8 <__divsf3_pse+0x26>
     e9a:	9f 5f       	subi	r25, 0xFF	; 255
     e9c:	5f 4f       	sbci	r21, 0xFF	; 255
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	44 1f       	adc	r20, r20
     ea4:	aa 1f       	adc	r26, r26
     ea6:	a9 f3       	breq	.-22     	; 0xe92 <__divsf3_pse+0x10>
     ea8:	35 d0       	rcall	.+106    	; 0xf14 <__divsf3_pse+0x92>
     eaa:	0e 2e       	mov	r0, r30
     eac:	3a f0       	brmi	.+14     	; 0xebc <__divsf3_pse+0x3a>
     eae:	e0 e8       	ldi	r30, 0x80	; 128
     eb0:	32 d0       	rcall	.+100    	; 0xf16 <__divsf3_pse+0x94>
     eb2:	91 50       	subi	r25, 0x01	; 1
     eb4:	50 40       	sbci	r21, 0x00	; 0
     eb6:	e6 95       	lsr	r30
     eb8:	00 1c       	adc	r0, r0
     eba:	ca f7       	brpl	.-14     	; 0xeae <__divsf3_pse+0x2c>
     ebc:	2b d0       	rcall	.+86     	; 0xf14 <__divsf3_pse+0x92>
     ebe:	fe 2f       	mov	r31, r30
     ec0:	29 d0       	rcall	.+82     	; 0xf14 <__divsf3_pse+0x92>
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	bb 1f       	adc	r27, r27
     eca:	26 17       	cp	r18, r22
     ecc:	37 07       	cpc	r19, r23
     ece:	48 07       	cpc	r20, r24
     ed0:	ab 07       	cpc	r26, r27
     ed2:	b0 e8       	ldi	r27, 0x80	; 128
     ed4:	09 f0       	breq	.+2      	; 0xed8 <__divsf3_pse+0x56>
     ed6:	bb 0b       	sbc	r27, r27
     ed8:	80 2d       	mov	r24, r0
     eda:	bf 01       	movw	r22, r30
     edc:	ff 27       	eor	r31, r31
     ede:	93 58       	subi	r25, 0x83	; 131
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	3a f0       	brmi	.+14     	; 0xef2 <__divsf3_pse+0x70>
     ee4:	9e 3f       	cpi	r25, 0xFE	; 254
     ee6:	51 05       	cpc	r21, r1
     ee8:	78 f0       	brcs	.+30     	; 0xf08 <__divsf3_pse+0x86>
     eea:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_inf>
     eee:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
     ef2:	5f 3f       	cpi	r21, 0xFF	; 255
     ef4:	e4 f3       	brlt	.-8      	; 0xeee <__divsf3_pse+0x6c>
     ef6:	98 3e       	cpi	r25, 0xE8	; 232
     ef8:	d4 f3       	brlt	.-12     	; 0xeee <__divsf3_pse+0x6c>
     efa:	86 95       	lsr	r24
     efc:	77 95       	ror	r23
     efe:	67 95       	ror	r22
     f00:	b7 95       	ror	r27
     f02:	f7 95       	ror	r31
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	c9 f7       	brne	.-14     	; 0xefa <__divsf3_pse+0x78>
     f08:	88 0f       	add	r24, r24
     f0a:	91 1d       	adc	r25, r1
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret
     f14:	e1 e0       	ldi	r30, 0x01	; 1
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	bb 1f       	adc	r27, r27
     f1e:	62 17       	cp	r22, r18
     f20:	73 07       	cpc	r23, r19
     f22:	84 07       	cpc	r24, r20
     f24:	ba 07       	cpc	r27, r26
     f26:	20 f0       	brcs	.+8      	; 0xf30 <__divsf3_pse+0xae>
     f28:	62 1b       	sub	r22, r18
     f2a:	73 0b       	sbc	r23, r19
     f2c:	84 0b       	sbc	r24, r20
     f2e:	ba 0b       	sbc	r27, r26
     f30:	ee 1f       	adc	r30, r30
     f32:	88 f7       	brcc	.-30     	; 0xf16 <__divsf3_pse+0x94>
     f34:	e0 95       	com	r30
     f36:	08 95       	ret

00000f38 <__fixsfsi>:
     f38:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     f3c:	68 94       	set
     f3e:	b1 11       	cpse	r27, r1
     f40:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_szero>
     f44:	08 95       	ret

00000f46 <__fixunssfsi>:
     f46:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_splitA>
     f4a:	88 f0       	brcs	.+34     	; 0xf6e <__fixunssfsi+0x28>
     f4c:	9f 57       	subi	r25, 0x7F	; 127
     f4e:	98 f0       	brcs	.+38     	; 0xf76 <__fixunssfsi+0x30>
     f50:	b9 2f       	mov	r27, r25
     f52:	99 27       	eor	r25, r25
     f54:	b7 51       	subi	r27, 0x17	; 23
     f56:	b0 f0       	brcs	.+44     	; 0xf84 <__fixunssfsi+0x3e>
     f58:	e1 f0       	breq	.+56     	; 0xf92 <__fixunssfsi+0x4c>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	1a f0       	brmi	.+6      	; 0xf6a <__fixunssfsi+0x24>
     f64:	ba 95       	dec	r27
     f66:	c9 f7       	brne	.-14     	; 0xf5a <__fixunssfsi+0x14>
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__fixunssfsi+0x4c>
     f6a:	b1 30       	cpi	r27, 0x01	; 1
     f6c:	91 f0       	breq	.+36     	; 0xf92 <__fixunssfsi+0x4c>
     f6e:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_zero>
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	08 95       	ret
     f76:	0c 94 be 08 	jmp	0x117c	; 0x117c <__fp_zero>
     f7a:	67 2f       	mov	r22, r23
     f7c:	78 2f       	mov	r23, r24
     f7e:	88 27       	eor	r24, r24
     f80:	b8 5f       	subi	r27, 0xF8	; 248
     f82:	39 f0       	breq	.+14     	; 0xf92 <__fixunssfsi+0x4c>
     f84:	b9 3f       	cpi	r27, 0xF9	; 249
     f86:	cc f3       	brlt	.-14     	; 0xf7a <__fixunssfsi+0x34>
     f88:	86 95       	lsr	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b3 95       	inc	r27
     f90:	d9 f7       	brne	.-10     	; 0xf88 <__fixunssfsi+0x42>
     f92:	3e f4       	brtc	.+14     	; 0xfa2 <__fixunssfsi+0x5c>
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	61 95       	neg	r22
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__floatunsisf>:
     fa4:	e8 94       	clt
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <__floatsisf+0x12>

00000fa8 <__floatsisf>:
     fa8:	97 fb       	bst	r25, 7
     faa:	3e f4       	brtc	.+14     	; 0xfba <__floatsisf+0x12>
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	99 23       	and	r25, r25
     fbc:	a9 f0       	breq	.+42     	; 0xfe8 <__floatsisf+0x40>
     fbe:	f9 2f       	mov	r31, r25
     fc0:	96 e9       	ldi	r25, 0x96	; 150
     fc2:	bb 27       	eor	r27, r27
     fc4:	93 95       	inc	r25
     fc6:	f6 95       	lsr	r31
     fc8:	87 95       	ror	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f1 11       	cpse	r31, r1
     fd2:	f8 cf       	rjmp	.-16     	; 0xfc4 <__floatsisf+0x1c>
     fd4:	fa f4       	brpl	.+62     	; 0x1014 <__floatsisf+0x6c>
     fd6:	bb 0f       	add	r27, r27
     fd8:	11 f4       	brne	.+4      	; 0xfde <__floatsisf+0x36>
     fda:	60 ff       	sbrs	r22, 0
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <__floatsisf+0x6c>
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	16 c0       	rjmp	.+44     	; 0x1014 <__floatsisf+0x6c>
     fe8:	88 23       	and	r24, r24
     fea:	11 f0       	breq	.+4      	; 0xff0 <__floatsisf+0x48>
     fec:	96 e9       	ldi	r25, 0x96	; 150
     fee:	11 c0       	rjmp	.+34     	; 0x1012 <__floatsisf+0x6a>
     ff0:	77 23       	and	r23, r23
     ff2:	21 f0       	breq	.+8      	; 0xffc <__floatsisf+0x54>
     ff4:	9e e8       	ldi	r25, 0x8E	; 142
     ff6:	87 2f       	mov	r24, r23
     ff8:	76 2f       	mov	r23, r22
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <__floatsisf+0x5e>
     ffc:	66 23       	and	r22, r22
     ffe:	71 f0       	breq	.+28     	; 0x101c <__floatsisf+0x74>
    1000:	96 e8       	ldi	r25, 0x86	; 134
    1002:	86 2f       	mov	r24, r22
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	2a f0       	brmi	.+10     	; 0x1014 <__floatsisf+0x6c>
    100a:	9a 95       	dec	r25
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	da f7       	brpl	.-10     	; 0x100a <__floatsisf+0x62>
    1014:	88 0f       	add	r24, r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__fp_cmp>:
    101e:	99 0f       	add	r25, r25
    1020:	00 08       	sbc	r0, r0
    1022:	55 0f       	add	r21, r21
    1024:	aa 0b       	sbc	r26, r26
    1026:	e0 e8       	ldi	r30, 0x80	; 128
    1028:	fe ef       	ldi	r31, 0xFE	; 254
    102a:	16 16       	cp	r1, r22
    102c:	17 06       	cpc	r1, r23
    102e:	e8 07       	cpc	r30, r24
    1030:	f9 07       	cpc	r31, r25
    1032:	c0 f0       	brcs	.+48     	; 0x1064 <__fp_cmp+0x46>
    1034:	12 16       	cp	r1, r18
    1036:	13 06       	cpc	r1, r19
    1038:	e4 07       	cpc	r30, r20
    103a:	f5 07       	cpc	r31, r21
    103c:	98 f0       	brcs	.+38     	; 0x1064 <__fp_cmp+0x46>
    103e:	62 1b       	sub	r22, r18
    1040:	73 0b       	sbc	r23, r19
    1042:	84 0b       	sbc	r24, r20
    1044:	95 0b       	sbc	r25, r21
    1046:	39 f4       	brne	.+14     	; 0x1056 <__fp_cmp+0x38>
    1048:	0a 26       	eor	r0, r26
    104a:	61 f0       	breq	.+24     	; 0x1064 <__fp_cmp+0x46>
    104c:	23 2b       	or	r18, r19
    104e:	24 2b       	or	r18, r20
    1050:	25 2b       	or	r18, r21
    1052:	21 f4       	brne	.+8      	; 0x105c <__fp_cmp+0x3e>
    1054:	08 95       	ret
    1056:	0a 26       	eor	r0, r26
    1058:	09 f4       	brne	.+2      	; 0x105c <__fp_cmp+0x3e>
    105a:	a1 40       	sbci	r26, 0x01	; 1
    105c:	a6 95       	lsr	r26
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	81 1d       	adc	r24, r1
    1062:	81 1d       	adc	r24, r1
    1064:	08 95       	ret

00001066 <__fp_inf>:
    1066:	97 f9       	bld	r25, 7
    1068:	9f 67       	ori	r25, 0x7F	; 127
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	08 95       	ret

00001072 <__fp_mintl>:
    1072:	88 23       	and	r24, r24
    1074:	71 f4       	brne	.+28     	; 0x1092 <__fp_mintl+0x20>
    1076:	77 23       	and	r23, r23
    1078:	21 f0       	breq	.+8      	; 0x1082 <__fp_mintl+0x10>
    107a:	98 50       	subi	r25, 0x08	; 8
    107c:	87 2b       	or	r24, r23
    107e:	76 2f       	mov	r23, r22
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <__fp_mintl+0x1e>
    1082:	66 23       	and	r22, r22
    1084:	11 f4       	brne	.+4      	; 0x108a <__fp_mintl+0x18>
    1086:	99 27       	eor	r25, r25
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <__fp_mintl+0x32>
    108a:	90 51       	subi	r25, 0x10	; 16
    108c:	86 2b       	or	r24, r22
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	2a f0       	brmi	.+10     	; 0x109e <__fp_mintl+0x2c>
    1094:	9a 95       	dec	r25
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	da f7       	brpl	.-10     	; 0x1094 <__fp_mintl+0x22>
    109e:	88 0f       	add	r24, r24
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret

000010a8 <__fp_mpack>:
    10a8:	9f 3f       	cpi	r25, 0xFF	; 255
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <__fp_mpack_finite+0xc>

000010ac <__fp_mpack_finite>:
    10ac:	91 50       	subi	r25, 0x01	; 1
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <__fp_mpack_finite+0xc>
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b7 95       	ror	r27
    10b8:	88 0f       	add	r24, r24
    10ba:	91 1d       	adc	r25, r1
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	97 f9       	bld	r25, 7
    10c2:	08 95       	ret

000010c4 <__fp_nan>:
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	80 ec       	ldi	r24, 0xC0	; 192
    10c8:	08 95       	ret

000010ca <__fp_pscA>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	09 06       	cpc	r0, r25
    10d6:	08 95       	ret

000010d8 <__fp_pscB>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	05 06       	cpc	r0, r21
    10e4:	08 95       	ret

000010e6 <__fp_round>:
    10e6:	09 2e       	mov	r0, r25
    10e8:	03 94       	inc	r0
    10ea:	00 0c       	add	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0xc>
    10ee:	88 23       	and	r24, r24
    10f0:	52 f0       	brmi	.+20     	; 0x1106 <__fp_round+0x20>
    10f2:	bb 0f       	add	r27, r27
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <__fp_round+0x20>
    10f6:	bf 2b       	or	r27, r31
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0x18>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__fp_round+0x20>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__fp_split3>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	90 58       	subi	r25, 0x80	; 128
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	59 f0       	breq	.+22     	; 0x1128 <__fp_splitA+0x10>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	71 f0       	breq	.+28     	; 0x1132 <__fp_splitA+0x1a>
    1116:	47 95       	ror	r20

00001118 <__fp_splitA>:
    1118:	88 0f       	add	r24, r24
    111a:	97 fb       	bst	r25, 7
    111c:	99 1f       	adc	r25, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_splitA+0x20>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	79 f0       	breq	.+30     	; 0x1142 <__fp_splitA+0x2a>
    1124:	87 95       	ror	r24
    1126:	08 95       	ret
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	55 1f       	adc	r21, r21
    1130:	f2 cf       	rjmp	.-28     	; 0x1116 <__fp_split3+0xe>
    1132:	46 95       	lsr	r20
    1134:	f1 df       	rcall	.-30     	; 0x1118 <__fp_splitA>
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <__fp_splitA+0x30>
    1138:	16 16       	cp	r1, r22
    113a:	17 06       	cpc	r1, r23
    113c:	18 06       	cpc	r1, r24
    113e:	99 1f       	adc	r25, r25
    1140:	f1 cf       	rjmp	.-30     	; 0x1124 <__fp_splitA+0xc>
    1142:	86 95       	lsr	r24
    1144:	71 05       	cpc	r23, r1
    1146:	61 05       	cpc	r22, r1
    1148:	08 94       	sec
    114a:	08 95       	ret

0000114c <__fp_trunc>:
    114c:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_splitA>
    1150:	a0 f0       	brcs	.+40     	; 0x117a <__fp_trunc+0x2e>
    1152:	be e7       	ldi	r27, 0x7E	; 126
    1154:	b9 17       	cp	r27, r25
    1156:	88 f4       	brcc	.+34     	; 0x117a <__fp_trunc+0x2e>
    1158:	bb 27       	eor	r27, r27
    115a:	9f 38       	cpi	r25, 0x8F	; 143
    115c:	60 f4       	brcc	.+24     	; 0x1176 <__fp_trunc+0x2a>
    115e:	16 16       	cp	r1, r22
    1160:	b1 1d       	adc	r27, r1
    1162:	67 2f       	mov	r22, r23
    1164:	78 2f       	mov	r23, r24
    1166:	88 27       	eor	r24, r24
    1168:	98 5f       	subi	r25, 0xF8	; 248
    116a:	f7 cf       	rjmp	.-18     	; 0x115a <__fp_trunc+0xe>
    116c:	86 95       	lsr	r24
    116e:	77 95       	ror	r23
    1170:	67 95       	ror	r22
    1172:	b1 1d       	adc	r27, r1
    1174:	93 95       	inc	r25
    1176:	96 39       	cpi	r25, 0x96	; 150
    1178:	c8 f3       	brcs	.-14     	; 0x116c <__fp_trunc+0x20>
    117a:	08 95       	ret

0000117c <__fp_zero>:
    117c:	e8 94       	clt

0000117e <__fp_szero>:
    117e:	bb 27       	eor	r27, r27
    1180:	66 27       	eor	r22, r22
    1182:	77 27       	eor	r23, r23
    1184:	cb 01       	movw	r24, r22
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret

0000118a <__umulhisi3>:
    118a:	a2 9f       	mul	r26, r18
    118c:	b0 01       	movw	r22, r0
    118e:	b3 9f       	mul	r27, r19
    1190:	c0 01       	movw	r24, r0
    1192:	a3 9f       	mul	r26, r19
    1194:	70 0d       	add	r23, r0
    1196:	81 1d       	adc	r24, r1
    1198:	11 24       	eor	r1, r1
    119a:	91 1d       	adc	r25, r1
    119c:	b2 9f       	mul	r27, r18
    119e:	70 0d       	add	r23, r0
    11a0:	81 1d       	adc	r24, r1
    11a2:	11 24       	eor	r1, r1
    11a4:	91 1d       	adc	r25, r1
    11a6:	08 95       	ret

000011a8 <_exit>:
    11a8:	f8 94       	cli

000011aa <__stop_program>:
    11aa:	ff cf       	rjmp	.-2      	; 0x11aa <__stop_program>
